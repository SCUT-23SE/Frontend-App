// tslint:disable
/**
 * 实训打卡
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { BadRequest } from '../models';
// @ts-ignore
import { Conflict } from '../models';
// @ts-ignore
import { Forbidden } from '../models';
// @ts-ignore
import { InlineObject13 } from '../models';
// @ts-ignore
import { InlineObject14 } from '../models';
// @ts-ignore
import { InternalServerError } from '../models';
// @ts-ignore
import { NotFound } from '../models';
// @ts-ignore
import { RequestQueryStatus } from '../models';
// @ts-ignore
import { Success } from '../models';
// @ts-ignore
import { SuccessWithData } from '../models';
// @ts-ignore
import { Unauthorized } from '../models';
/**
 * AuditRequestsApi - axios parameter creator
 * @export
 */
export const AuditRequestsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 用户组管理员批准或拒绝签到审核申请。批准后将创建成功的签到记录。
     * @summary 处理签到审核申请
     * @param {number} auditRequestId 审核申请的 ID
     * @param {InlineObject14} [inlineObject14]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditRequestsAuditRequestIdPut: async (
      auditRequestId: number,
      inlineObject14?: InlineObject14,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'auditRequestId' is not null or undefined
      if (auditRequestId === null || auditRequestId === undefined) {
        throw new RequiredError(
          'auditRequestId',
          'Required parameter auditRequestId was null or undefined when calling auditRequestsAuditRequestIdPut.'
        );
      }
      const localVarPath = `/audit-requests/{auditRequestId}`.replace(
        `{${'auditRequestId'}}`,
        encodeURIComponent(String(auditRequestId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject14 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject14 !== undefined ? inlineObject14 : {})
        : inlineObject14 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户组管理员批准或拒绝签到审核申请。批准后将创建成功的签到记录。
     * @summary 处理签到审核申请
     * @param {number} auditRequestId 审核申请的 ID
     * @param {InlineObject14} [inlineObject14]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditRequestsAuditRequestIdPut_1: async (
      auditRequestId: number,
      inlineObject14?: InlineObject14,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'auditRequestId' is not null or undefined
      if (auditRequestId === null || auditRequestId === undefined) {
        throw new RequiredError(
          'auditRequestId',
          'Required parameter auditRequestId was null or undefined when calling auditRequestsAuditRequestIdPut_1.'
        );
      }
      const localVarPath = `/audit-requests/{auditRequestId}`.replace(
        `{${'auditRequestId'}}`,
        encodeURIComponent(String(auditRequestId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject14 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject14 !== undefined ? inlineObject14 : {})
        : inlineObject14 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 当用户无法通过常规方式成功签到时，可以提交异常情况说明和证明，申请人工审核。审核通过后才会生成签到记录。
     * @summary 提交签到异常审核申请
     * @param {number} taskId 相关的签到任务 ID
     * @param {InlineObject13} [inlineObject13]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdAuditRequestsPost: async (
      taskId: number,
      inlineObject13?: InlineObject13,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'taskId' is not null or undefined
      if (taskId === null || taskId === undefined) {
        throw new RequiredError(
          'taskId',
          'Required parameter taskId was null or undefined when calling checkinTasksTaskIdAuditRequestsPost.'
        );
      }
      const localVarPath = `/checkin-tasks/{taskId}/audit-requests`.replace(
        `{${'taskId'}}`,
        encodeURIComponent(String(taskId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject13 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject13 !== undefined ? inlineObject13 : {})
        : inlineObject13 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 当用户无法通过常规方式成功签到时，可以提交异常情况说明和证明，申请人工审核。审核通过后才会生成签到记录。
     * @summary 提交签到异常审核申请
     * @param {number} taskId 相关的签到任务 ID
     * @param {InlineObject13} [inlineObject13]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdAuditRequestsPost_2: async (
      taskId: number,
      inlineObject13?: InlineObject13,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'taskId' is not null or undefined
      if (taskId === null || taskId === undefined) {
        throw new RequiredError(
          'taskId',
          'Required parameter taskId was null or undefined when calling checkinTasksTaskIdAuditRequestsPost_2.'
        );
      }
      const localVarPath = `/checkin-tasks/{taskId}/audit-requests`.replace(
        `{${'taskId'}}`,
        encodeURIComponent(String(taskId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject13 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject13 !== undefined ? inlineObject13 : {})
        : inlineObject13 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 管理员查看用户组内的所有签到异常审核申请。
     * @summary 获取用户组的签到审核申请列表
     * @param {number} groupId 用户组 ID
     * @param {RequestQueryStatus} [status] 按状态筛选: &#x60;pending&#x60;, &#x60;processed&#x60;, &#x60;all&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdAuditRequestsGet: async (
      groupId: number,
      status?: RequestQueryStatus,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdAuditRequestsGet.'
        );
      }
      const localVarPath = `/groups/{groupId}/audit-requests`.replace(
        `{${'groupId'}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (status !== undefined) {
        localVarQueryParameter['status'] = status;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 管理员查看用户组内的所有签到异常审核申请。
     * @summary 获取用户组的签到审核申请列表
     * @param {number} groupId 用户组 ID
     * @param {RequestQueryStatus} [status] 按状态筛选: &#x60;pending&#x60;, &#x60;processed&#x60;, &#x60;all&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdAuditRequestsGet_3: async (
      groupId: number,
      status?: RequestQueryStatus,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdAuditRequestsGet_3.'
        );
      }
      const localVarPath = `/groups/{groupId}/audit-requests`.replace(
        `{${'groupId'}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (status !== undefined) {
        localVarQueryParameter['status'] = status;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取当前用户提交的所有审核请求列表
     * @summary 获取当前用户的审核请求
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeAuditRequestsGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/audit-requests`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取当前用户提交的所有审核请求列表
     * @summary 获取当前用户的审核请求
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeAuditRequestsGet_4: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/audit-requests`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuditRequestsApi - functional programming interface
 * @export
 */
export const AuditRequestsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * 用户组管理员批准或拒绝签到审核申请。批准后将创建成功的签到记录。
     * @summary 处理签到审核申请
     * @param {number} auditRequestId 审核申请的 ID
     * @param {InlineObject14} [inlineObject14]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async auditRequestsAuditRequestIdPut(
      auditRequestId: number,
      inlineObject14?: InlineObject14,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>
    > {
      const localVarAxiosArgs = await AuditRequestsApiAxiosParamCreator(
        configuration
      ).auditRequestsAuditRequestIdPut(auditRequestId, inlineObject14, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户组管理员批准或拒绝签到审核申请。批准后将创建成功的签到记录。
     * @summary 处理签到审核申请
     * @param {number} auditRequestId 审核申请的 ID
     * @param {InlineObject14} [inlineObject14]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async auditRequestsAuditRequestIdPut_1(
      auditRequestId: number,
      inlineObject14?: InlineObject14,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>
    > {
      const localVarAxiosArgs = await AuditRequestsApiAxiosParamCreator(
        configuration
      ).auditRequestsAuditRequestIdPut_1(
        auditRequestId,
        inlineObject14,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 当用户无法通过常规方式成功签到时，可以提交异常情况说明和证明，申请人工审核。审核通过后才会生成签到记录。
     * @summary 提交签到异常审核申请
     * @param {number} taskId 相关的签到任务 ID
     * @param {InlineObject13} [inlineObject13]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async checkinTasksTaskIdAuditRequestsPost(
      taskId: number,
      inlineObject13?: InlineObject13,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await AuditRequestsApiAxiosParamCreator(
        configuration
      ).checkinTasksTaskIdAuditRequestsPost(taskId, inlineObject13, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 当用户无法通过常规方式成功签到时，可以提交异常情况说明和证明，申请人工审核。审核通过后才会生成签到记录。
     * @summary 提交签到异常审核申请
     * @param {number} taskId 相关的签到任务 ID
     * @param {InlineObject13} [inlineObject13]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async checkinTasksTaskIdAuditRequestsPost_2(
      taskId: number,
      inlineObject13?: InlineObject13,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await AuditRequestsApiAxiosParamCreator(
        configuration
      ).checkinTasksTaskIdAuditRequestsPost_2(taskId, inlineObject13, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 管理员查看用户组内的所有签到异常审核申请。
     * @summary 获取用户组的签到审核申请列表
     * @param {number} groupId 用户组 ID
     * @param {RequestQueryStatus} [status] 按状态筛选: &#x60;pending&#x60;, &#x60;processed&#x60;, &#x60;all&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdAuditRequestsGet(
      groupId: number,
      status?: RequestQueryStatus,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await AuditRequestsApiAxiosParamCreator(
        configuration
      ).groupsGroupIdAuditRequestsGet(groupId, status, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 管理员查看用户组内的所有签到异常审核申请。
     * @summary 获取用户组的签到审核申请列表
     * @param {number} groupId 用户组 ID
     * @param {RequestQueryStatus} [status] 按状态筛选: &#x60;pending&#x60;, &#x60;processed&#x60;, &#x60;all&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdAuditRequestsGet_3(
      groupId: number,
      status?: RequestQueryStatus,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await AuditRequestsApiAxiosParamCreator(
        configuration
      ).groupsGroupIdAuditRequestsGet_3(groupId, status, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取当前用户提交的所有审核请求列表
     * @summary 获取当前用户的审核请求
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersMeAuditRequestsGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await AuditRequestsApiAxiosParamCreator(
        configuration
      ).usersMeAuditRequestsGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取当前用户提交的所有审核请求列表
     * @summary 获取当前用户的审核请求
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersMeAuditRequestsGet_4(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await AuditRequestsApiAxiosParamCreator(
        configuration
      ).usersMeAuditRequestsGet_4(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * AuditRequestsApi - factory interface
 * @export
 */
export const AuditRequestsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * 用户组管理员批准或拒绝签到审核申请。批准后将创建成功的签到记录。
     * @summary 处理签到审核申请
     * @param {number} auditRequestId 审核申请的 ID
     * @param {InlineObject14} [inlineObject14]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditRequestsAuditRequestIdPut(
      auditRequestId: number,
      inlineObject14?: InlineObject14,
      options?: any
    ): AxiosPromise<Success> {
      return AuditRequestsApiFp(configuration)
        .auditRequestsAuditRequestIdPut(auditRequestId, inlineObject14, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户组管理员批准或拒绝签到审核申请。批准后将创建成功的签到记录。
     * @summary 处理签到审核申请
     * @param {number} auditRequestId 审核申请的 ID
     * @param {InlineObject14} [inlineObject14]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    auditRequestsAuditRequestIdPut_1(
      auditRequestId: number,
      inlineObject14?: InlineObject14,
      options?: any
    ): AxiosPromise<Success> {
      return AuditRequestsApiFp(configuration)
        .auditRequestsAuditRequestIdPut_1(
          auditRequestId,
          inlineObject14,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * 当用户无法通过常规方式成功签到时，可以提交异常情况说明和证明，申请人工审核。审核通过后才会生成签到记录。
     * @summary 提交签到异常审核申请
     * @param {number} taskId 相关的签到任务 ID
     * @param {InlineObject13} [inlineObject13]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdAuditRequestsPost(
      taskId: number,
      inlineObject13?: InlineObject13,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return AuditRequestsApiFp(configuration)
        .checkinTasksTaskIdAuditRequestsPost(taskId, inlineObject13, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 当用户无法通过常规方式成功签到时，可以提交异常情况说明和证明，申请人工审核。审核通过后才会生成签到记录。
     * @summary 提交签到异常审核申请
     * @param {number} taskId 相关的签到任务 ID
     * @param {InlineObject13} [inlineObject13]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdAuditRequestsPost_2(
      taskId: number,
      inlineObject13?: InlineObject13,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return AuditRequestsApiFp(configuration)
        .checkinTasksTaskIdAuditRequestsPost_2(taskId, inlineObject13, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 管理员查看用户组内的所有签到异常审核申请。
     * @summary 获取用户组的签到审核申请列表
     * @param {number} groupId 用户组 ID
     * @param {RequestQueryStatus} [status] 按状态筛选: &#x60;pending&#x60;, &#x60;processed&#x60;, &#x60;all&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdAuditRequestsGet(
      groupId: number,
      status?: RequestQueryStatus,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return AuditRequestsApiFp(configuration)
        .groupsGroupIdAuditRequestsGet(groupId, status, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 管理员查看用户组内的所有签到异常审核申请。
     * @summary 获取用户组的签到审核申请列表
     * @param {number} groupId 用户组 ID
     * @param {RequestQueryStatus} [status] 按状态筛选: &#x60;pending&#x60;, &#x60;processed&#x60;, &#x60;all&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdAuditRequestsGet_3(
      groupId: number,
      status?: RequestQueryStatus,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return AuditRequestsApiFp(configuration)
        .groupsGroupIdAuditRequestsGet_3(groupId, status, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取当前用户提交的所有审核请求列表
     * @summary 获取当前用户的审核请求
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeAuditRequestsGet(
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return AuditRequestsApiFp(configuration)
        .usersMeAuditRequestsGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取当前用户提交的所有审核请求列表
     * @summary 获取当前用户的审核请求
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeAuditRequestsGet_4(
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return AuditRequestsApiFp(configuration)
        .usersMeAuditRequestsGet_4(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuditRequestsApi - object-oriented interface
 * @export
 * @class AuditRequestsApi
 * @extends {BaseAPI}
 */
export class AuditRequestsApi extends BaseAPI {
  /**
   * 用户组管理员批准或拒绝签到审核申请。批准后将创建成功的签到记录。
   * @summary 处理签到审核申请
   * @param {number} auditRequestId 审核申请的 ID
   * @param {InlineObject14} [inlineObject14]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditRequestsApi
   */
  public auditRequestsAuditRequestIdPut(
    auditRequestId: number,
    inlineObject14?: InlineObject14,
    options?: any
  ) {
    return AuditRequestsApiFp(this.configuration)
      .auditRequestsAuditRequestIdPut(auditRequestId, inlineObject14, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户组管理员批准或拒绝签到审核申请。批准后将创建成功的签到记录。
   * @summary 处理签到审核申请
   * @param {number} auditRequestId 审核申请的 ID
   * @param {InlineObject14} [inlineObject14]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditRequestsApi
   */
  public auditRequestsAuditRequestIdPut_1(
    auditRequestId: number,
    inlineObject14?: InlineObject14,
    options?: any
  ) {
    return AuditRequestsApiFp(this.configuration)
      .auditRequestsAuditRequestIdPut_1(auditRequestId, inlineObject14, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 当用户无法通过常规方式成功签到时，可以提交异常情况说明和证明，申请人工审核。审核通过后才会生成签到记录。
   * @summary 提交签到异常审核申请
   * @param {number} taskId 相关的签到任务 ID
   * @param {InlineObject13} [inlineObject13]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditRequestsApi
   */
  public checkinTasksTaskIdAuditRequestsPost(
    taskId: number,
    inlineObject13?: InlineObject13,
    options?: any
  ) {
    return AuditRequestsApiFp(this.configuration)
      .checkinTasksTaskIdAuditRequestsPost(taskId, inlineObject13, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 当用户无法通过常规方式成功签到时，可以提交异常情况说明和证明，申请人工审核。审核通过后才会生成签到记录。
   * @summary 提交签到异常审核申请
   * @param {number} taskId 相关的签到任务 ID
   * @param {InlineObject13} [inlineObject13]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditRequestsApi
   */
  public checkinTasksTaskIdAuditRequestsPost_2(
    taskId: number,
    inlineObject13?: InlineObject13,
    options?: any
  ) {
    return AuditRequestsApiFp(this.configuration)
      .checkinTasksTaskIdAuditRequestsPost_2(taskId, inlineObject13, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 管理员查看用户组内的所有签到异常审核申请。
   * @summary 获取用户组的签到审核申请列表
   * @param {number} groupId 用户组 ID
   * @param {RequestQueryStatus} [status] 按状态筛选: &#x60;pending&#x60;, &#x60;processed&#x60;, &#x60;all&#x60;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditRequestsApi
   */
  public groupsGroupIdAuditRequestsGet(
    groupId: number,
    status?: RequestQueryStatus,
    options?: any
  ) {
    return AuditRequestsApiFp(this.configuration)
      .groupsGroupIdAuditRequestsGet(groupId, status, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 管理员查看用户组内的所有签到异常审核申请。
   * @summary 获取用户组的签到审核申请列表
   * @param {number} groupId 用户组 ID
   * @param {RequestQueryStatus} [status] 按状态筛选: &#x60;pending&#x60;, &#x60;processed&#x60;, &#x60;all&#x60;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditRequestsApi
   */
  public groupsGroupIdAuditRequestsGet_3(
    groupId: number,
    status?: RequestQueryStatus,
    options?: any
  ) {
    return AuditRequestsApiFp(this.configuration)
      .groupsGroupIdAuditRequestsGet_3(groupId, status, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取当前用户提交的所有审核请求列表
   * @summary 获取当前用户的审核请求
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditRequestsApi
   */
  public usersMeAuditRequestsGet(options?: any) {
    return AuditRequestsApiFp(this.configuration)
      .usersMeAuditRequestsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取当前用户提交的所有审核请求列表
   * @summary 获取当前用户的审核请求
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditRequestsApi
   */
  public usersMeAuditRequestsGet_4(options?: any) {
    return AuditRequestsApiFp(this.configuration)
      .usersMeAuditRequestsGet_4(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
