// tslint:disable
/**
 * 实训打卡
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { BadRequest } from '../models';
// @ts-ignore
import { Conflict } from '../models';
// @ts-ignore
import { Forbidden } from '../models';
// @ts-ignore
import { InlineObject12 } from '../models';
// @ts-ignore
import { InternalServerError } from '../models';
// @ts-ignore
import { NotFound } from '../models';
// @ts-ignore
import { SuccessWithData } from '../models';
// @ts-ignore
import { Unauthorized } from '../models';
/**
 * CheckinRecordsApi - axios parameter creator
 * @export
 */
export const CheckinRecordsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 用户针对某个签到任务执行签到操作。根据任务配置的校验方式提供相应数据。需要登录且是任务所属组成员。
     * @summary 执行签到
     * @param {number} taskId 签到任务 ID
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdCheckinPost: async (
      taskId: number,
      inlineObject12?: InlineObject12,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'taskId' is not null or undefined
      if (taskId === null || taskId === undefined) {
        throw new RequiredError(
          'taskId',
          'Required parameter taskId was null or undefined when calling checkinTasksTaskIdCheckinPost.'
        );
      }
      const localVarPath = `/checkin-tasks/{taskId}/checkin`.replace(
        `{${'taskId'}}`,
        encodeURIComponent(String(taskId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject12 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject12 !== undefined ? inlineObject12 : {})
        : inlineObject12 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户针对某个签到任务执行签到操作。根据任务配置的校验方式提供相应数据。需要登录且是任务所属组成员。
     * @summary 执行签到
     * @param {number} taskId 签到任务 ID
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdCheckinPost_1: async (
      taskId: number,
      inlineObject12?: InlineObject12,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'taskId' is not null or undefined
      if (taskId === null || taskId === undefined) {
        throw new RequiredError(
          'taskId',
          'Required parameter taskId was null or undefined when calling checkinTasksTaskIdCheckinPost_1.'
        );
      }
      const localVarPath = `/checkin-tasks/{taskId}/checkin`.replace(
        `{${'taskId'}}`,
        encodeURIComponent(String(taskId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject12 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject12 !== undefined ? inlineObject12 : {})
        : inlineObject12 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户组管理员查看某个签到任务的所有成功签到记录。
     * @summary 获取签到任务的签到记录列表 (管理员视角)
     * @param {number} taskId 签到任务 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdRecordsGet: async (
      taskId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'taskId' is not null or undefined
      if (taskId === null || taskId === undefined) {
        throw new RequiredError(
          'taskId',
          'Required parameter taskId was null or undefined when calling checkinTasksTaskIdRecordsGet.'
        );
      }
      const localVarPath = `/checkin-tasks/{taskId}/records`.replace(
        `{${'taskId'}}`,
        encodeURIComponent(String(taskId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户组管理员查看某个签到任务的所有成功签到记录。
     * @summary 获取签到任务的签到记录列表 (管理员视角)
     * @param {number} taskId 签到任务 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdRecordsGet_2: async (
      taskId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'taskId' is not null or undefined
      if (taskId === null || taskId === undefined) {
        throw new RequiredError(
          'taskId',
          'Required parameter taskId was null or undefined when calling checkinTasksTaskIdRecordsGet_2.'
        );
      }
      const localVarPath = `/checkin-tasks/{taskId}/records`.replace(
        `{${'taskId'}}`,
        encodeURIComponent(String(taskId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取当前用户的所有签到记录，只返回签到成功的记录
     * @summary 获取当前用户签到记录
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeCheckinRecordsGet: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/checkin-records`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取当前用户的所有签到记录，只返回签到成功的记录
     * @summary 获取当前用户签到记录
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeCheckinRecordsGet_3: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/checkin-records`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CheckinRecordsApi - functional programming interface
 * @export
 */
export const CheckinRecordsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * 用户针对某个签到任务执行签到操作。根据任务配置的校验方式提供相应数据。需要登录且是任务所属组成员。
     * @summary 执行签到
     * @param {number} taskId 签到任务 ID
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async checkinTasksTaskIdCheckinPost(
      taskId: number,
      inlineObject12?: InlineObject12,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await CheckinRecordsApiAxiosParamCreator(
        configuration
      ).checkinTasksTaskIdCheckinPost(taskId, inlineObject12, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户针对某个签到任务执行签到操作。根据任务配置的校验方式提供相应数据。需要登录且是任务所属组成员。
     * @summary 执行签到
     * @param {number} taskId 签到任务 ID
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async checkinTasksTaskIdCheckinPost_1(
      taskId: number,
      inlineObject12?: InlineObject12,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await CheckinRecordsApiAxiosParamCreator(
        configuration
      ).checkinTasksTaskIdCheckinPost_1(taskId, inlineObject12, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户组管理员查看某个签到任务的所有成功签到记录。
     * @summary 获取签到任务的签到记录列表 (管理员视角)
     * @param {number} taskId 签到任务 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async checkinTasksTaskIdRecordsGet(
      taskId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await CheckinRecordsApiAxiosParamCreator(
        configuration
      ).checkinTasksTaskIdRecordsGet(taskId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户组管理员查看某个签到任务的所有成功签到记录。
     * @summary 获取签到任务的签到记录列表 (管理员视角)
     * @param {number} taskId 签到任务 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async checkinTasksTaskIdRecordsGet_2(
      taskId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await CheckinRecordsApiAxiosParamCreator(
        configuration
      ).checkinTasksTaskIdRecordsGet_2(taskId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取当前用户的所有签到记录，只返回签到成功的记录
     * @summary 获取当前用户签到记录
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersMeCheckinRecordsGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await CheckinRecordsApiAxiosParamCreator(
        configuration
      ).usersMeCheckinRecordsGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取当前用户的所有签到记录，只返回签到成功的记录
     * @summary 获取当前用户签到记录
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersMeCheckinRecordsGet_3(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await CheckinRecordsApiAxiosParamCreator(
        configuration
      ).usersMeCheckinRecordsGet_3(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * CheckinRecordsApi - factory interface
 * @export
 */
export const CheckinRecordsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * 用户针对某个签到任务执行签到操作。根据任务配置的校验方式提供相应数据。需要登录且是任务所属组成员。
     * @summary 执行签到
     * @param {number} taskId 签到任务 ID
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdCheckinPost(
      taskId: number,
      inlineObject12?: InlineObject12,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return CheckinRecordsApiFp(configuration)
        .checkinTasksTaskIdCheckinPost(taskId, inlineObject12, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户针对某个签到任务执行签到操作。根据任务配置的校验方式提供相应数据。需要登录且是任务所属组成员。
     * @summary 执行签到
     * @param {number} taskId 签到任务 ID
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdCheckinPost_1(
      taskId: number,
      inlineObject12?: InlineObject12,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return CheckinRecordsApiFp(configuration)
        .checkinTasksTaskIdCheckinPost_1(taskId, inlineObject12, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户组管理员查看某个签到任务的所有成功签到记录。
     * @summary 获取签到任务的签到记录列表 (管理员视角)
     * @param {number} taskId 签到任务 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdRecordsGet(
      taskId: number,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return CheckinRecordsApiFp(configuration)
        .checkinTasksTaskIdRecordsGet(taskId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户组管理员查看某个签到任务的所有成功签到记录。
     * @summary 获取签到任务的签到记录列表 (管理员视角)
     * @param {number} taskId 签到任务 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdRecordsGet_2(
      taskId: number,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return CheckinRecordsApiFp(configuration)
        .checkinTasksTaskIdRecordsGet_2(taskId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取当前用户的所有签到记录，只返回签到成功的记录
     * @summary 获取当前用户签到记录
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeCheckinRecordsGet(
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return CheckinRecordsApiFp(configuration)
        .usersMeCheckinRecordsGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取当前用户的所有签到记录，只返回签到成功的记录
     * @summary 获取当前用户签到记录
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeCheckinRecordsGet_3(
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return CheckinRecordsApiFp(configuration)
        .usersMeCheckinRecordsGet_3(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CheckinRecordsApi - object-oriented interface
 * @export
 * @class CheckinRecordsApi
 * @extends {BaseAPI}
 */
export class CheckinRecordsApi extends BaseAPI {
  /**
   * 用户针对某个签到任务执行签到操作。根据任务配置的校验方式提供相应数据。需要登录且是任务所属组成员。
   * @summary 执行签到
   * @param {number} taskId 签到任务 ID
   * @param {InlineObject12} [inlineObject12]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CheckinRecordsApi
   */
  public checkinTasksTaskIdCheckinPost(
    taskId: number,
    inlineObject12?: InlineObject12,
    options?: any
  ) {
    return CheckinRecordsApiFp(this.configuration)
      .checkinTasksTaskIdCheckinPost(taskId, inlineObject12, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户针对某个签到任务执行签到操作。根据任务配置的校验方式提供相应数据。需要登录且是任务所属组成员。
   * @summary 执行签到
   * @param {number} taskId 签到任务 ID
   * @param {InlineObject12} [inlineObject12]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CheckinRecordsApi
   */
  public checkinTasksTaskIdCheckinPost_1(
    taskId: number,
    inlineObject12?: InlineObject12,
    options?: any
  ) {
    return CheckinRecordsApiFp(this.configuration)
      .checkinTasksTaskIdCheckinPost_1(taskId, inlineObject12, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户组管理员查看某个签到任务的所有成功签到记录。
   * @summary 获取签到任务的签到记录列表 (管理员视角)
   * @param {number} taskId 签到任务 ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CheckinRecordsApi
   */
  public checkinTasksTaskIdRecordsGet(taskId: number, options?: any) {
    return CheckinRecordsApiFp(this.configuration)
      .checkinTasksTaskIdRecordsGet(taskId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户组管理员查看某个签到任务的所有成功签到记录。
   * @summary 获取签到任务的签到记录列表 (管理员视角)
   * @param {number} taskId 签到任务 ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CheckinRecordsApi
   */
  public checkinTasksTaskIdRecordsGet_2(taskId: number, options?: any) {
    return CheckinRecordsApiFp(this.configuration)
      .checkinTasksTaskIdRecordsGet_2(taskId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取当前用户的所有签到记录，只返回签到成功的记录
   * @summary 获取当前用户签到记录
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CheckinRecordsApi
   */
  public usersMeCheckinRecordsGet(options?: any) {
    return CheckinRecordsApiFp(this.configuration)
      .usersMeCheckinRecordsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取当前用户的所有签到记录，只返回签到成功的记录
   * @summary 获取当前用户签到记录
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CheckinRecordsApi
   */
  public usersMeCheckinRecordsGet_3(options?: any) {
    return CheckinRecordsApiFp(this.configuration)
      .usersMeCheckinRecordsGet_3(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
