// tslint:disable
/**
 * 实训打卡
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { BadRequest } from '../models';
// @ts-ignore
import { Conflict } from '../models';
// @ts-ignore
import { Forbidden } from '../models';
// @ts-ignore
import { InlineObject6 } from '../models';
// @ts-ignore
import { InlineObject7 } from '../models';
// @ts-ignore
import { InlineObject8 } from '../models';
// @ts-ignore
import { InternalServerError } from '../models';
// @ts-ignore
import { NotFound } from '../models';
// @ts-ignore
import { Success } from '../models';
// @ts-ignore
import { SuccessWithData } from '../models';
// @ts-ignore
import { Unauthorized } from '../models';
/**
 * CheckinTasksApi - axios parameter creator
 * @export
 */
export const CheckinTasksApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 管理员删除指定签到任务
     * @summary 删除签到任务
     * @param {number} taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdDelete: async (
      taskId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'taskId' is not null or undefined
      if (taskId === null || taskId === undefined) {
        throw new RequiredError(
          'taskId',
          'Required parameter taskId was null or undefined when calling checkinTasksTaskIdDelete.'
        );
      }
      const localVarPath = `/checkin-tasks/{taskId}`.replace(
        `{${'taskId'}}`,
        encodeURIComponent(String(taskId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 管理员删除指定签到任务
     * @summary 删除签到任务
     * @param {number} taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdDelete_1: async (
      taskId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'taskId' is not null or undefined
      if (taskId === null || taskId === undefined) {
        throw new RequiredError(
          'taskId',
          'Required parameter taskId was null or undefined when calling checkinTasksTaskIdDelete_1.'
        );
      }
      const localVarPath = `/checkin-tasks/{taskId}`.replace(
        `{${'taskId'}}`,
        encodeURIComponent(String(taskId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取指定签到任务的详细信息。需要是任务所属组成员。
     * @summary 获取签到任务详细信息
     * @param {number} taskId 签到任务 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdGet: async (
      taskId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'taskId' is not null or undefined
      if (taskId === null || taskId === undefined) {
        throw new RequiredError(
          'taskId',
          'Required parameter taskId was null or undefined when calling checkinTasksTaskIdGet.'
        );
      }
      const localVarPath = `/checkin-tasks/{taskId}`.replace(
        `{${'taskId'}}`,
        encodeURIComponent(String(taskId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取指定签到任务的详细信息。需要是任务所属组成员。
     * @summary 获取签到任务详细信息
     * @param {number} taskId 签到任务 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdGet_2: async (
      taskId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'taskId' is not null or undefined
      if (taskId === null || taskId === undefined) {
        throw new RequiredError(
          'taskId',
          'Required parameter taskId was null or undefined when calling checkinTasksTaskIdGet_2.'
        );
      }
      const localVarPath = `/checkin-tasks/{taskId}`.replace(
        `{${'taskId'}}`,
        encodeURIComponent(String(taskId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 更新指定签到任务的信息。需要是任务所属组的管理员。注意：如果当前时间已经到达或超过了签到开始时间，将无法修改任务。
     * @summary 更新签到任务
     * @param {number} taskId 签到任务 ID
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdPut: async (
      taskId: number,
      inlineObject7?: InlineObject7,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'taskId' is not null or undefined
      if (taskId === null || taskId === undefined) {
        throw new RequiredError(
          'taskId',
          'Required parameter taskId was null or undefined when calling checkinTasksTaskIdPut.'
        );
      }
      const localVarPath = `/checkin-tasks/{taskId}`.replace(
        `{${'taskId'}}`,
        encodeURIComponent(String(taskId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject7 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject7 !== undefined ? inlineObject7 : {})
        : inlineObject7 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 更新指定签到任务的信息。需要是任务所属组的管理员。注意：如果当前时间已经到达或超过了签到开始时间，将无法修改任务。
     * @summary 更新签到任务
     * @param {number} taskId 签到任务 ID
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdPut_3: async (
      taskId: number,
      inlineObject7?: InlineObject7,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'taskId' is not null or undefined
      if (taskId === null || taskId === undefined) {
        throw new RequiredError(
          'taskId',
          'Required parameter taskId was null or undefined when calling checkinTasksTaskIdPut_3.'
        );
      }
      const localVarPath = `/checkin-tasks/{taskId}`.replace(
        `{${'taskId'}}`,
        encodeURIComponent(String(taskId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject7 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject7 !== undefined ? inlineObject7 : {})
        : inlineObject7 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 验证用户提供的签到信息是否符合签到任务要求，但不会创建实际的签到记录。用于在完成真正签到前预先验证用户的位置、WiFi或NFC等信息。
     * @summary 验证签到信息
     * @param {number} taskId 签到任务 ID
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdVerifyPost: async (
      taskId: number,
      inlineObject8?: InlineObject8,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'taskId' is not null or undefined
      if (taskId === null || taskId === undefined) {
        throw new RequiredError(
          'taskId',
          'Required parameter taskId was null or undefined when calling checkinTasksTaskIdVerifyPost.'
        );
      }
      const localVarPath = `/checkin-tasks/{taskId}/verify`.replace(
        `{${'taskId'}}`,
        encodeURIComponent(String(taskId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject8 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject8 !== undefined ? inlineObject8 : {})
        : inlineObject8 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 验证用户提供的签到信息是否符合签到任务要求，但不会创建实际的签到记录。用于在完成真正签到前预先验证用户的位置、WiFi或NFC等信息。
     * @summary 验证签到信息
     * @param {number} taskId 签到任务 ID
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdVerifyPost_4: async (
      taskId: number,
      inlineObject8?: InlineObject8,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'taskId' is not null or undefined
      if (taskId === null || taskId === undefined) {
        throw new RequiredError(
          'taskId',
          'Required parameter taskId was null or undefined when calling checkinTasksTaskIdVerifyPost_4.'
        );
      }
      const localVarPath = `/checkin-tasks/{taskId}/verify`.replace(
        `{${'taskId'}}`,
        encodeURIComponent(String(taskId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject8 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject8 !== undefined ? inlineObject8 : {})
        : inlineObject8 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 管理员查看用户组内的所有签到任务。
     * @summary 获取用户组的签到任务列表
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdCheckinTasksGet: async (
      groupId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdCheckinTasksGet.'
        );
      }
      const localVarPath = `/groups/{groupId}/checkin-tasks`.replace(
        `{${'groupId'}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 管理员查看用户组内的所有签到任务。
     * @summary 获取用户组的签到任务列表
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdCheckinTasksGet_5: async (
      groupId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdCheckinTasksGet_5.'
        );
      }
      const localVarPath = `/groups/{groupId}/checkin-tasks`.replace(
        `{${'groupId'}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户组管理员在指定用户组内创建签到任务。
     * @summary 创建签到任务
     * @param {number} groupId 用户组 ID
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdCheckinTasksPost: async (
      groupId: number,
      inlineObject6?: InlineObject6,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdCheckinTasksPost.'
        );
      }
      const localVarPath = `/groups/{groupId}/checkin-tasks`.replace(
        `{${'groupId'}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject6 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject6 !== undefined ? inlineObject6 : {})
        : inlineObject6 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户组管理员在指定用户组内创建签到任务。
     * @summary 创建签到任务
     * @param {number} groupId 用户组 ID
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdCheckinTasksPost_6: async (
      groupId: number,
      inlineObject6?: InlineObject6,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdCheckinTasksPost_6.'
        );
      }
      const localVarPath = `/groups/{groupId}/checkin-tasks`.replace(
        `{${'groupId'}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject6 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject6 !== undefined ? inlineObject6 : {})
        : inlineObject6 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取当前登录用户需要参与的所有签到任务列表
     * @summary 获取当前用户的签到任务
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeCheckinTasksGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/users/me/checkin-tasks`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取当前登录用户需要参与的所有签到任务列表
     * @summary 获取当前用户的签到任务
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeCheckinTasksGet_7: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/checkin-tasks`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CheckinTasksApi - functional programming interface
 * @export
 */
export const CheckinTasksApiFp = function (configuration?: Configuration) {
  return {
    /**
     * 管理员删除指定签到任务
     * @summary 删除签到任务
     * @param {number} taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async checkinTasksTaskIdDelete(
      taskId: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>
    > {
      const localVarAxiosArgs = await CheckinTasksApiAxiosParamCreator(
        configuration
      ).checkinTasksTaskIdDelete(taskId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 管理员删除指定签到任务
     * @summary 删除签到任务
     * @param {number} taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async checkinTasksTaskIdDelete_1(
      taskId: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>
    > {
      const localVarAxiosArgs = await CheckinTasksApiAxiosParamCreator(
        configuration
      ).checkinTasksTaskIdDelete_1(taskId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取指定签到任务的详细信息。需要是任务所属组成员。
     * @summary 获取签到任务详细信息
     * @param {number} taskId 签到任务 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async checkinTasksTaskIdGet(
      taskId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await CheckinTasksApiAxiosParamCreator(
        configuration
      ).checkinTasksTaskIdGet(taskId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取指定签到任务的详细信息。需要是任务所属组成员。
     * @summary 获取签到任务详细信息
     * @param {number} taskId 签到任务 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async checkinTasksTaskIdGet_2(
      taskId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await CheckinTasksApiAxiosParamCreator(
        configuration
      ).checkinTasksTaskIdGet_2(taskId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 更新指定签到任务的信息。需要是任务所属组的管理员。注意：如果当前时间已经到达或超过了签到开始时间，将无法修改任务。
     * @summary 更新签到任务
     * @param {number} taskId 签到任务 ID
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async checkinTasksTaskIdPut(
      taskId: number,
      inlineObject7?: InlineObject7,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await CheckinTasksApiAxiosParamCreator(
        configuration
      ).checkinTasksTaskIdPut(taskId, inlineObject7, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 更新指定签到任务的信息。需要是任务所属组的管理员。注意：如果当前时间已经到达或超过了签到开始时间，将无法修改任务。
     * @summary 更新签到任务
     * @param {number} taskId 签到任务 ID
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async checkinTasksTaskIdPut_3(
      taskId: number,
      inlineObject7?: InlineObject7,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await CheckinTasksApiAxiosParamCreator(
        configuration
      ).checkinTasksTaskIdPut_3(taskId, inlineObject7, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 验证用户提供的签到信息是否符合签到任务要求，但不会创建实际的签到记录。用于在完成真正签到前预先验证用户的位置、WiFi或NFC等信息。
     * @summary 验证签到信息
     * @param {number} taskId 签到任务 ID
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async checkinTasksTaskIdVerifyPost(
      taskId: number,
      inlineObject8?: InlineObject8,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await CheckinTasksApiAxiosParamCreator(
        configuration
      ).checkinTasksTaskIdVerifyPost(taskId, inlineObject8, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 验证用户提供的签到信息是否符合签到任务要求，但不会创建实际的签到记录。用于在完成真正签到前预先验证用户的位置、WiFi或NFC等信息。
     * @summary 验证签到信息
     * @param {number} taskId 签到任务 ID
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async checkinTasksTaskIdVerifyPost_4(
      taskId: number,
      inlineObject8?: InlineObject8,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await CheckinTasksApiAxiosParamCreator(
        configuration
      ).checkinTasksTaskIdVerifyPost_4(taskId, inlineObject8, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 管理员查看用户组内的所有签到任务。
     * @summary 获取用户组的签到任务列表
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdCheckinTasksGet(
      groupId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await CheckinTasksApiAxiosParamCreator(
        configuration
      ).groupsGroupIdCheckinTasksGet(groupId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 管理员查看用户组内的所有签到任务。
     * @summary 获取用户组的签到任务列表
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdCheckinTasksGet_5(
      groupId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await CheckinTasksApiAxiosParamCreator(
        configuration
      ).groupsGroupIdCheckinTasksGet_5(groupId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户组管理员在指定用户组内创建签到任务。
     * @summary 创建签到任务
     * @param {number} groupId 用户组 ID
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdCheckinTasksPost(
      groupId: number,
      inlineObject6?: InlineObject6,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await CheckinTasksApiAxiosParamCreator(
        configuration
      ).groupsGroupIdCheckinTasksPost(groupId, inlineObject6, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户组管理员在指定用户组内创建签到任务。
     * @summary 创建签到任务
     * @param {number} groupId 用户组 ID
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdCheckinTasksPost_6(
      groupId: number,
      inlineObject6?: InlineObject6,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await CheckinTasksApiAxiosParamCreator(
        configuration
      ).groupsGroupIdCheckinTasksPost_6(groupId, inlineObject6, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取当前登录用户需要参与的所有签到任务列表
     * @summary 获取当前用户的签到任务
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersMeCheckinTasksGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await CheckinTasksApiAxiosParamCreator(
        configuration
      ).usersMeCheckinTasksGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取当前登录用户需要参与的所有签到任务列表
     * @summary 获取当前用户的签到任务
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersMeCheckinTasksGet_7(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await CheckinTasksApiAxiosParamCreator(
        configuration
      ).usersMeCheckinTasksGet_7(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * CheckinTasksApi - factory interface
 * @export
 */
export const CheckinTasksApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * 管理员删除指定签到任务
     * @summary 删除签到任务
     * @param {number} taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdDelete(
      taskId: number,
      options?: any
    ): AxiosPromise<Success> {
      return CheckinTasksApiFp(configuration)
        .checkinTasksTaskIdDelete(taskId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 管理员删除指定签到任务
     * @summary 删除签到任务
     * @param {number} taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdDelete_1(
      taskId: number,
      options?: any
    ): AxiosPromise<Success> {
      return CheckinTasksApiFp(configuration)
        .checkinTasksTaskIdDelete_1(taskId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取指定签到任务的详细信息。需要是任务所属组成员。
     * @summary 获取签到任务详细信息
     * @param {number} taskId 签到任务 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdGet(
      taskId: number,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return CheckinTasksApiFp(configuration)
        .checkinTasksTaskIdGet(taskId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取指定签到任务的详细信息。需要是任务所属组成员。
     * @summary 获取签到任务详细信息
     * @param {number} taskId 签到任务 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdGet_2(
      taskId: number,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return CheckinTasksApiFp(configuration)
        .checkinTasksTaskIdGet_2(taskId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 更新指定签到任务的信息。需要是任务所属组的管理员。注意：如果当前时间已经到达或超过了签到开始时间，将无法修改任务。
     * @summary 更新签到任务
     * @param {number} taskId 签到任务 ID
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdPut(
      taskId: number,
      inlineObject7?: InlineObject7,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return CheckinTasksApiFp(configuration)
        .checkinTasksTaskIdPut(taskId, inlineObject7, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 更新指定签到任务的信息。需要是任务所属组的管理员。注意：如果当前时间已经到达或超过了签到开始时间，将无法修改任务。
     * @summary 更新签到任务
     * @param {number} taskId 签到任务 ID
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdPut_3(
      taskId: number,
      inlineObject7?: InlineObject7,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return CheckinTasksApiFp(configuration)
        .checkinTasksTaskIdPut_3(taskId, inlineObject7, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 验证用户提供的签到信息是否符合签到任务要求，但不会创建实际的签到记录。用于在完成真正签到前预先验证用户的位置、WiFi或NFC等信息。
     * @summary 验证签到信息
     * @param {number} taskId 签到任务 ID
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdVerifyPost(
      taskId: number,
      inlineObject8?: InlineObject8,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return CheckinTasksApiFp(configuration)
        .checkinTasksTaskIdVerifyPost(taskId, inlineObject8, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 验证用户提供的签到信息是否符合签到任务要求，但不会创建实际的签到记录。用于在完成真正签到前预先验证用户的位置、WiFi或NFC等信息。
     * @summary 验证签到信息
     * @param {number} taskId 签到任务 ID
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkinTasksTaskIdVerifyPost_4(
      taskId: number,
      inlineObject8?: InlineObject8,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return CheckinTasksApiFp(configuration)
        .checkinTasksTaskIdVerifyPost_4(taskId, inlineObject8, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 管理员查看用户组内的所有签到任务。
     * @summary 获取用户组的签到任务列表
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdCheckinTasksGet(
      groupId: number,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return CheckinTasksApiFp(configuration)
        .groupsGroupIdCheckinTasksGet(groupId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 管理员查看用户组内的所有签到任务。
     * @summary 获取用户组的签到任务列表
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdCheckinTasksGet_5(
      groupId: number,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return CheckinTasksApiFp(configuration)
        .groupsGroupIdCheckinTasksGet_5(groupId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户组管理员在指定用户组内创建签到任务。
     * @summary 创建签到任务
     * @param {number} groupId 用户组 ID
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdCheckinTasksPost(
      groupId: number,
      inlineObject6?: InlineObject6,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return CheckinTasksApiFp(configuration)
        .groupsGroupIdCheckinTasksPost(groupId, inlineObject6, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户组管理员在指定用户组内创建签到任务。
     * @summary 创建签到任务
     * @param {number} groupId 用户组 ID
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdCheckinTasksPost_6(
      groupId: number,
      inlineObject6?: InlineObject6,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return CheckinTasksApiFp(configuration)
        .groupsGroupIdCheckinTasksPost_6(groupId, inlineObject6, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取当前登录用户需要参与的所有签到任务列表
     * @summary 获取当前用户的签到任务
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeCheckinTasksGet(
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return CheckinTasksApiFp(configuration)
        .usersMeCheckinTasksGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取当前登录用户需要参与的所有签到任务列表
     * @summary 获取当前用户的签到任务
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeCheckinTasksGet_7(
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return CheckinTasksApiFp(configuration)
        .usersMeCheckinTasksGet_7(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CheckinTasksApi - object-oriented interface
 * @export
 * @class CheckinTasksApi
 * @extends {BaseAPI}
 */
export class CheckinTasksApi extends BaseAPI {
  /**
   * 管理员删除指定签到任务
   * @summary 删除签到任务
   * @param {number} taskId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CheckinTasksApi
   */
  public checkinTasksTaskIdDelete(taskId: number, options?: any) {
    return CheckinTasksApiFp(this.configuration)
      .checkinTasksTaskIdDelete(taskId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 管理员删除指定签到任务
   * @summary 删除签到任务
   * @param {number} taskId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CheckinTasksApi
   */
  public checkinTasksTaskIdDelete_1(taskId: number, options?: any) {
    return CheckinTasksApiFp(this.configuration)
      .checkinTasksTaskIdDelete_1(taskId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取指定签到任务的详细信息。需要是任务所属组成员。
   * @summary 获取签到任务详细信息
   * @param {number} taskId 签到任务 ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CheckinTasksApi
   */
  public checkinTasksTaskIdGet(taskId: number, options?: any) {
    return CheckinTasksApiFp(this.configuration)
      .checkinTasksTaskIdGet(taskId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取指定签到任务的详细信息。需要是任务所属组成员。
   * @summary 获取签到任务详细信息
   * @param {number} taskId 签到任务 ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CheckinTasksApi
   */
  public checkinTasksTaskIdGet_2(taskId: number, options?: any) {
    return CheckinTasksApiFp(this.configuration)
      .checkinTasksTaskIdGet_2(taskId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 更新指定签到任务的信息。需要是任务所属组的管理员。注意：如果当前时间已经到达或超过了签到开始时间，将无法修改任务。
   * @summary 更新签到任务
   * @param {number} taskId 签到任务 ID
   * @param {InlineObject7} [inlineObject7]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CheckinTasksApi
   */
  public checkinTasksTaskIdPut(
    taskId: number,
    inlineObject7?: InlineObject7,
    options?: any
  ) {
    return CheckinTasksApiFp(this.configuration)
      .checkinTasksTaskIdPut(taskId, inlineObject7, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 更新指定签到任务的信息。需要是任务所属组的管理员。注意：如果当前时间已经到达或超过了签到开始时间，将无法修改任务。
   * @summary 更新签到任务
   * @param {number} taskId 签到任务 ID
   * @param {InlineObject7} [inlineObject7]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CheckinTasksApi
   */
  public checkinTasksTaskIdPut_3(
    taskId: number,
    inlineObject7?: InlineObject7,
    options?: any
  ) {
    return CheckinTasksApiFp(this.configuration)
      .checkinTasksTaskIdPut_3(taskId, inlineObject7, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 验证用户提供的签到信息是否符合签到任务要求，但不会创建实际的签到记录。用于在完成真正签到前预先验证用户的位置、WiFi或NFC等信息。
   * @summary 验证签到信息
   * @param {number} taskId 签到任务 ID
   * @param {InlineObject8} [inlineObject8]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CheckinTasksApi
   */
  public checkinTasksTaskIdVerifyPost(
    taskId: number,
    inlineObject8?: InlineObject8,
    options?: any
  ) {
    return CheckinTasksApiFp(this.configuration)
      .checkinTasksTaskIdVerifyPost(taskId, inlineObject8, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 验证用户提供的签到信息是否符合签到任务要求，但不会创建实际的签到记录。用于在完成真正签到前预先验证用户的位置、WiFi或NFC等信息。
   * @summary 验证签到信息
   * @param {number} taskId 签到任务 ID
   * @param {InlineObject8} [inlineObject8]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CheckinTasksApi
   */
  public checkinTasksTaskIdVerifyPost_4(
    taskId: number,
    inlineObject8?: InlineObject8,
    options?: any
  ) {
    return CheckinTasksApiFp(this.configuration)
      .checkinTasksTaskIdVerifyPost_4(taskId, inlineObject8, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 管理员查看用户组内的所有签到任务。
   * @summary 获取用户组的签到任务列表
   * @param {number} groupId 用户组 ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CheckinTasksApi
   */
  public groupsGroupIdCheckinTasksGet(groupId: number, options?: any) {
    return CheckinTasksApiFp(this.configuration)
      .groupsGroupIdCheckinTasksGet(groupId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 管理员查看用户组内的所有签到任务。
   * @summary 获取用户组的签到任务列表
   * @param {number} groupId 用户组 ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CheckinTasksApi
   */
  public groupsGroupIdCheckinTasksGet_5(groupId: number, options?: any) {
    return CheckinTasksApiFp(this.configuration)
      .groupsGroupIdCheckinTasksGet_5(groupId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户组管理员在指定用户组内创建签到任务。
   * @summary 创建签到任务
   * @param {number} groupId 用户组 ID
   * @param {InlineObject6} [inlineObject6]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CheckinTasksApi
   */
  public groupsGroupIdCheckinTasksPost(
    groupId: number,
    inlineObject6?: InlineObject6,
    options?: any
  ) {
    return CheckinTasksApiFp(this.configuration)
      .groupsGroupIdCheckinTasksPost(groupId, inlineObject6, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户组管理员在指定用户组内创建签到任务。
   * @summary 创建签到任务
   * @param {number} groupId 用户组 ID
   * @param {InlineObject6} [inlineObject6]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CheckinTasksApi
   */
  public groupsGroupIdCheckinTasksPost_6(
    groupId: number,
    inlineObject6?: InlineObject6,
    options?: any
  ) {
    return CheckinTasksApiFp(this.configuration)
      .groupsGroupIdCheckinTasksPost_6(groupId, inlineObject6, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取当前登录用户需要参与的所有签到任务列表
   * @summary 获取当前用户的签到任务
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CheckinTasksApi
   */
  public usersMeCheckinTasksGet(options?: any) {
    return CheckinTasksApiFp(this.configuration)
      .usersMeCheckinTasksGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取当前登录用户需要参与的所有签到任务列表
   * @summary 获取当前用户的签到任务
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CheckinTasksApi
   */
  public usersMeCheckinTasksGet_7(options?: any) {
    return CheckinTasksApiFp(this.configuration)
      .usersMeCheckinTasksGet_7(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
