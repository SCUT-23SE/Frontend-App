// tslint:disable
/**
 * 实训打卡
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { BaseResponse } from '../models';
// @ts-ignore
import { InternalServerError } from '../models';
/**
 * ExportApi - axios parameter creator
 * @export
 */
export const ExportApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 根据指定的查询参数导出签到记录，并直接返回 XLSX 文件。
     * @summary 导出签到记录为XLSX文件
     * @param {Array<number>} groupIds 需要导出的用户组ID列表。例如：&#x60;groupIds&#x3D;1&amp;groupIds&#x3D;2&#x60; 或 &#x60;groupIds&#x3D;1,2,3&#x60;。
     * @param {number} dateStart 开始日期（Unix时间戳，单位：秒）
     * @param {number} dateEnd 结束日期（Unix时间戳，单位：秒）。必须大于或等于开始日期。
     * @param {Array<'success' | 'absent' | 'exception'>} [statuses] 需要导出的签到状态列表。例如：&#x60;statuses&#x3D;success&amp;statuses&#x3D;absent&#x60; 或 &#x60;statuses&#x3D;success,absent&#x60;。如果未提供，则使用默认状态列表。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportCheckinsXlsxGet: async (
      groupIds: Array<number>,
      dateStart: number,
      dateEnd: number,
      statuses?: Array<'success' | 'absent' | 'exception'>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupIds' is not null or undefined
      if (groupIds === null || groupIds === undefined) {
        throw new RequiredError(
          'groupIds',
          'Required parameter groupIds was null or undefined when calling exportCheckinsXlsxGet.'
        );
      }
      // verify required parameter 'dateStart' is not null or undefined
      if (dateStart === null || dateStart === undefined) {
        throw new RequiredError(
          'dateStart',
          'Required parameter dateStart was null or undefined when calling exportCheckinsXlsxGet.'
        );
      }
      // verify required parameter 'dateEnd' is not null or undefined
      if (dateEnd === null || dateEnd === undefined) {
        throw new RequiredError(
          'dateEnd',
          'Required parameter dateEnd was null or undefined when calling exportCheckinsXlsxGet.'
        );
      }
      const localVarPath = `/export/checkins.xlsx`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (groupIds) {
        localVarQueryParameter['groupIds'] = groupIds;
      }

      if (dateStart !== undefined) {
        localVarQueryParameter['dateStart'] = dateStart;
      }

      if (dateEnd !== undefined) {
        localVarQueryParameter['dateEnd'] = dateEnd;
      }

      if (statuses) {
        localVarQueryParameter['statuses'] = statuses;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 根据指定的查询参数导出签到记录，并直接返回 XLSX 文件。
     * @summary 导出签到记录为XLSX文件
     * @param {Array<number>} groupIds 需要导出的用户组ID列表。例如：&#x60;groupIds&#x3D;1&amp;groupIds&#x3D;2&#x60; 或 &#x60;groupIds&#x3D;1,2,3&#x60;。
     * @param {number} dateStart 开始日期（Unix时间戳，单位：秒）
     * @param {number} dateEnd 结束日期（Unix时间戳，单位：秒）。必须大于或等于开始日期。
     * @param {Array<'success' | 'absent' | 'exception'>} [statuses] 需要导出的签到状态列表。例如：&#x60;statuses&#x3D;success&amp;statuses&#x3D;absent&#x60; 或 &#x60;statuses&#x3D;success,absent&#x60;。如果未提供，则使用默认状态列表。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportCheckinsXlsxGet_1: async (
      groupIds: Array<number>,
      dateStart: number,
      dateEnd: number,
      statuses?: Array<'success' | 'absent' | 'exception'>,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupIds' is not null or undefined
      if (groupIds === null || groupIds === undefined) {
        throw new RequiredError(
          'groupIds',
          'Required parameter groupIds was null or undefined when calling exportCheckinsXlsxGet_1.'
        );
      }
      // verify required parameter 'dateStart' is not null or undefined
      if (dateStart === null || dateStart === undefined) {
        throw new RequiredError(
          'dateStart',
          'Required parameter dateStart was null or undefined when calling exportCheckinsXlsxGet_1.'
        );
      }
      // verify required parameter 'dateEnd' is not null or undefined
      if (dateEnd === null || dateEnd === undefined) {
        throw new RequiredError(
          'dateEnd',
          'Required parameter dateEnd was null or undefined when calling exportCheckinsXlsxGet_1.'
        );
      }
      const localVarPath = `/export/checkins.xlsx`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (groupIds) {
        localVarQueryParameter['groupIds'] = groupIds;
      }

      if (dateStart !== undefined) {
        localVarQueryParameter['dateStart'] = dateStart;
      }

      if (dateEnd !== undefined) {
        localVarQueryParameter['dateEnd'] = dateEnd;
      }

      if (statuses) {
        localVarQueryParameter['statuses'] = statuses;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ExportApi - functional programming interface
 * @export
 */
export const ExportApiFp = function (configuration?: Configuration) {
  return {
    /**
     * 根据指定的查询参数导出签到记录，并直接返回 XLSX 文件。
     * @summary 导出签到记录为XLSX文件
     * @param {Array<number>} groupIds 需要导出的用户组ID列表。例如：&#x60;groupIds&#x3D;1&amp;groupIds&#x3D;2&#x60; 或 &#x60;groupIds&#x3D;1,2,3&#x60;。
     * @param {number} dateStart 开始日期（Unix时间戳，单位：秒）
     * @param {number} dateEnd 结束日期（Unix时间戳，单位：秒）。必须大于或等于开始日期。
     * @param {Array<'success' | 'absent' | 'exception'>} [statuses] 需要导出的签到状态列表。例如：&#x60;statuses&#x3D;success&amp;statuses&#x3D;absent&#x60; 或 &#x60;statuses&#x3D;success,absent&#x60;。如果未提供，则使用默认状态列表。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async exportCheckinsXlsxGet(
      groupIds: Array<number>,
      dateStart: number,
      dateEnd: number,
      statuses?: Array<'success' | 'absent' | 'exception'>,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await ExportApiAxiosParamCreator(
        configuration
      ).exportCheckinsXlsxGet(groupIds, dateStart, dateEnd, statuses, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 根据指定的查询参数导出签到记录，并直接返回 XLSX 文件。
     * @summary 导出签到记录为XLSX文件
     * @param {Array<number>} groupIds 需要导出的用户组ID列表。例如：&#x60;groupIds&#x3D;1&amp;groupIds&#x3D;2&#x60; 或 &#x60;groupIds&#x3D;1,2,3&#x60;。
     * @param {number} dateStart 开始日期（Unix时间戳，单位：秒）
     * @param {number} dateEnd 结束日期（Unix时间戳，单位：秒）。必须大于或等于开始日期。
     * @param {Array<'success' | 'absent' | 'exception'>} [statuses] 需要导出的签到状态列表。例如：&#x60;statuses&#x3D;success&amp;statuses&#x3D;absent&#x60; 或 &#x60;statuses&#x3D;success,absent&#x60;。如果未提供，则使用默认状态列表。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async exportCheckinsXlsxGet_1(
      groupIds: Array<number>,
      dateStart: number,
      dateEnd: number,
      statuses?: Array<'success' | 'absent' | 'exception'>,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await ExportApiAxiosParamCreator(
        configuration
      ).exportCheckinsXlsxGet_1(
        groupIds,
        dateStart,
        dateEnd,
        statuses,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * ExportApi - factory interface
 * @export
 */
export const ExportApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * 根据指定的查询参数导出签到记录，并直接返回 XLSX 文件。
     * @summary 导出签到记录为XLSX文件
     * @param {Array<number>} groupIds 需要导出的用户组ID列表。例如：&#x60;groupIds&#x3D;1&amp;groupIds&#x3D;2&#x60; 或 &#x60;groupIds&#x3D;1,2,3&#x60;。
     * @param {number} dateStart 开始日期（Unix时间戳，单位：秒）
     * @param {number} dateEnd 结束日期（Unix时间戳，单位：秒）。必须大于或等于开始日期。
     * @param {Array<'success' | 'absent' | 'exception'>} [statuses] 需要导出的签到状态列表。例如：&#x60;statuses&#x3D;success&amp;statuses&#x3D;absent&#x60; 或 &#x60;statuses&#x3D;success,absent&#x60;。如果未提供，则使用默认状态列表。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportCheckinsXlsxGet(
      groupIds: Array<number>,
      dateStart: number,
      dateEnd: number,
      statuses?: Array<'success' | 'absent' | 'exception'>,
      options?: any
    ): AxiosPromise<object> {
      return ExportApiFp(configuration)
        .exportCheckinsXlsxGet(groupIds, dateStart, dateEnd, statuses, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 根据指定的查询参数导出签到记录，并直接返回 XLSX 文件。
     * @summary 导出签到记录为XLSX文件
     * @param {Array<number>} groupIds 需要导出的用户组ID列表。例如：&#x60;groupIds&#x3D;1&amp;groupIds&#x3D;2&#x60; 或 &#x60;groupIds&#x3D;1,2,3&#x60;。
     * @param {number} dateStart 开始日期（Unix时间戳，单位：秒）
     * @param {number} dateEnd 结束日期（Unix时间戳，单位：秒）。必须大于或等于开始日期。
     * @param {Array<'success' | 'absent' | 'exception'>} [statuses] 需要导出的签到状态列表。例如：&#x60;statuses&#x3D;success&amp;statuses&#x3D;absent&#x60; 或 &#x60;statuses&#x3D;success,absent&#x60;。如果未提供，则使用默认状态列表。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportCheckinsXlsxGet_1(
      groupIds: Array<number>,
      dateStart: number,
      dateEnd: number,
      statuses?: Array<'success' | 'absent' | 'exception'>,
      options?: any
    ): AxiosPromise<object> {
      return ExportApiFp(configuration)
        .exportCheckinsXlsxGet_1(
          groupIds,
          dateStart,
          dateEnd,
          statuses,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ExportApi - object-oriented interface
 * @export
 * @class ExportApi
 * @extends {BaseAPI}
 */
export class ExportApi extends BaseAPI {
  /**
   * 根据指定的查询参数导出签到记录，并直接返回 XLSX 文件。
   * @summary 导出签到记录为XLSX文件
   * @param {Array<number>} groupIds 需要导出的用户组ID列表。例如：&#x60;groupIds&#x3D;1&amp;groupIds&#x3D;2&#x60; 或 &#x60;groupIds&#x3D;1,2,3&#x60;。
   * @param {number} dateStart 开始日期（Unix时间戳，单位：秒）
   * @param {number} dateEnd 结束日期（Unix时间戳，单位：秒）。必须大于或等于开始日期。
   * @param {Array<'success' | 'absent' | 'exception'>} [statuses] 需要导出的签到状态列表。例如：&#x60;statuses&#x3D;success&amp;statuses&#x3D;absent&#x60; 或 &#x60;statuses&#x3D;success,absent&#x60;。如果未提供，则使用默认状态列表。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExportApi
   */
  public exportCheckinsXlsxGet(
    groupIds: Array<number>,
    dateStart: number,
    dateEnd: number,
    statuses?: Array<'success' | 'absent' | 'exception'>,
    options?: any
  ) {
    return ExportApiFp(this.configuration)
      .exportCheckinsXlsxGet(groupIds, dateStart, dateEnd, statuses, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 根据指定的查询参数导出签到记录，并直接返回 XLSX 文件。
   * @summary 导出签到记录为XLSX文件
   * @param {Array<number>} groupIds 需要导出的用户组ID列表。例如：&#x60;groupIds&#x3D;1&amp;groupIds&#x3D;2&#x60; 或 &#x60;groupIds&#x3D;1,2,3&#x60;。
   * @param {number} dateStart 开始日期（Unix时间戳，单位：秒）
   * @param {number} dateEnd 结束日期（Unix时间戳，单位：秒）。必须大于或等于开始日期。
   * @param {Array<'success' | 'absent' | 'exception'>} [statuses] 需要导出的签到状态列表。例如：&#x60;statuses&#x3D;success&amp;statuses&#x3D;absent&#x60; 或 &#x60;statuses&#x3D;success,absent&#x60;。如果未提供，则使用默认状态列表。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExportApi
   */
  public exportCheckinsXlsxGet_1(
    groupIds: Array<number>,
    dateStart: number,
    dateEnd: number,
    statuses?: Array<'success' | 'absent' | 'exception'>,
    options?: any
  ) {
    return ExportApiFp(this.configuration)
      .exportCheckinsXlsxGet_1(groupIds, dateStart, dateEnd, statuses, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
