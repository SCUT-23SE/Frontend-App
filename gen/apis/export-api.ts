// tslint:disable
/**
 * 实训打卡
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { BaseResponse } from '../models';
// @ts-ignore
import { InlineObject12 } from '../models';
// @ts-ignore
import { InternalServerError } from '../models';
// @ts-ignore
import { SuccessWithData } from '../models';
/**
 * ExportApi - axios parameter creator
 * @export
 */
export const ExportApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 下载指定的导出文件
     * @summary 下载导出文件
     * @param {string} fileName 导出文件名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportFilesFileNameGet: async (
      fileName: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'fileName' is not null or undefined
      if (fileName === null || fileName === undefined) {
        throw new RequiredError(
          'fileName',
          'Required parameter fileName was null or undefined when calling exportFilesFileNameGet.'
        );
      }
      const localVarPath = `/export/files/{fileName}`.replace(
        `{${'fileName'}}`,
        encodeURIComponent(String(fileName))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 下载指定的导出文件
     * @summary 下载导出文件
     * @param {string} fileName 导出文件名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportFilesFileNameGet_1: async (
      fileName: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'fileName' is not null or undefined
      if (fileName === null || fileName === undefined) {
        throw new RequiredError(
          'fileName',
          'Required parameter fileName was null or undefined when calling exportFilesFileNameGet_1.'
        );
      }
      const localVarPath = `/export/files/{fileName}`.replace(
        `{${'fileName'}}`,
        encodeURIComponent(String(fileName))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取当前用户创建的所有导出任务及状态
     * @summary 获取导出任务列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportTasksGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/export/tasks`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取当前用户创建的所有导出任务及状态
     * @summary 获取导出任务列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportTasksGet_2: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/export/tasks`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 根据指定的参数创建新的签到数据导出任务
     * @summary 创建导出任务
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportTasksPost: async (
      inlineObject12?: InlineObject12,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/export/tasks`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject12 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject12 !== undefined ? inlineObject12 : {})
        : inlineObject12 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 根据指定的参数创建新的签到数据导出任务
     * @summary 创建导出任务
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportTasksPost_3: async (
      inlineObject12?: InlineObject12,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/export/tasks`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject12 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject12 !== undefined ? inlineObject12 : {})
        : inlineObject12 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ExportApi - functional programming interface
 * @export
 */
export const ExportApiFp = function (configuration?: Configuration) {
  return {
    /**
     * 下载指定的导出文件
     * @summary 下载导出文件
     * @param {string} fileName 导出文件名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async exportFilesFileNameGet(
      fileName: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await ExportApiAxiosParamCreator(
        configuration
      ).exportFilesFileNameGet(fileName, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 下载指定的导出文件
     * @summary 下载导出文件
     * @param {string} fileName 导出文件名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async exportFilesFileNameGet_1(
      fileName: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await ExportApiAxiosParamCreator(
        configuration
      ).exportFilesFileNameGet_1(fileName, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取当前用户创建的所有导出任务及状态
     * @summary 获取导出任务列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async exportTasksGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await ExportApiAxiosParamCreator(
        configuration
      ).exportTasksGet(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取当前用户创建的所有导出任务及状态
     * @summary 获取导出任务列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async exportTasksGet_2(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await ExportApiAxiosParamCreator(
        configuration
      ).exportTasksGet_2(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 根据指定的参数创建新的签到数据导出任务
     * @summary 创建导出任务
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async exportTasksPost(
      inlineObject12?: InlineObject12,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await ExportApiAxiosParamCreator(
        configuration
      ).exportTasksPost(inlineObject12, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 根据指定的参数创建新的签到数据导出任务
     * @summary 创建导出任务
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async exportTasksPost_3(
      inlineObject12?: InlineObject12,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await ExportApiAxiosParamCreator(
        configuration
      ).exportTasksPost_3(inlineObject12, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * ExportApi - factory interface
 * @export
 */
export const ExportApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * 下载指定的导出文件
     * @summary 下载导出文件
     * @param {string} fileName 导出文件名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportFilesFileNameGet(
      fileName: string,
      options?: any
    ): AxiosPromise<object> {
      return ExportApiFp(configuration)
        .exportFilesFileNameGet(fileName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 下载指定的导出文件
     * @summary 下载导出文件
     * @param {string} fileName 导出文件名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportFilesFileNameGet_1(
      fileName: string,
      options?: any
    ): AxiosPromise<object> {
      return ExportApiFp(configuration)
        .exportFilesFileNameGet_1(fileName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取当前用户创建的所有导出任务及状态
     * @summary 获取导出任务列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportTasksGet(options?: any): AxiosPromise<SuccessWithData & object> {
      return ExportApiFp(configuration)
        .exportTasksGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取当前用户创建的所有导出任务及状态
     * @summary 获取导出任务列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportTasksGet_2(options?: any): AxiosPromise<SuccessWithData & object> {
      return ExportApiFp(configuration)
        .exportTasksGet_2(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 根据指定的参数创建新的签到数据导出任务
     * @summary 创建导出任务
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportTasksPost(
      inlineObject12?: InlineObject12,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return ExportApiFp(configuration)
        .exportTasksPost(inlineObject12, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 根据指定的参数创建新的签到数据导出任务
     * @summary 创建导出任务
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportTasksPost_3(
      inlineObject12?: InlineObject12,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return ExportApiFp(configuration)
        .exportTasksPost_3(inlineObject12, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ExportApi - object-oriented interface
 * @export
 * @class ExportApi
 * @extends {BaseAPI}
 */
export class ExportApi extends BaseAPI {
  /**
   * 下载指定的导出文件
   * @summary 下载导出文件
   * @param {string} fileName 导出文件名
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExportApi
   */
  public exportFilesFileNameGet(fileName: string, options?: any) {
    return ExportApiFp(this.configuration)
      .exportFilesFileNameGet(fileName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 下载指定的导出文件
   * @summary 下载导出文件
   * @param {string} fileName 导出文件名
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExportApi
   */
  public exportFilesFileNameGet_1(fileName: string, options?: any) {
    return ExportApiFp(this.configuration)
      .exportFilesFileNameGet_1(fileName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取当前用户创建的所有导出任务及状态
   * @summary 获取导出任务列表
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExportApi
   */
  public exportTasksGet(options?: any) {
    return ExportApiFp(this.configuration)
      .exportTasksGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取当前用户创建的所有导出任务及状态
   * @summary 获取导出任务列表
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExportApi
   */
  public exportTasksGet_2(options?: any) {
    return ExportApiFp(this.configuration)
      .exportTasksGet_2(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 根据指定的参数创建新的签到数据导出任务
   * @summary 创建导出任务
   * @param {InlineObject12} [inlineObject12]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExportApi
   */
  public exportTasksPost(inlineObject12?: InlineObject12, options?: any) {
    return ExportApiFp(this.configuration)
      .exportTasksPost(inlineObject12, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 根据指定的参数创建新的签到数据导出任务
   * @summary 创建导出任务
   * @param {InlineObject12} [inlineObject12]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExportApi
   */
  public exportTasksPost_3(inlineObject12?: InlineObject12, options?: any) {
    return ExportApiFp(this.configuration)
      .exportTasksPost_3(inlineObject12, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
