// tslint:disable
/**
 * 实训打卡
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { BadRequest } from '../models';
// @ts-ignore
import { InlineObject15 } from '../models';
// @ts-ignore
import { InlineObject16 } from '../models';
// @ts-ignore
import { InternalServerError } from '../models';
// @ts-ignore
import { NotFound } from '../models';
// @ts-ignore
import { SuccessWithData } from '../models';
// @ts-ignore
import { Unauthorized } from '../models';
/**
 * FaceApi - axios parameter creator
 * @export
 */
export const FaceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 获取已登录用户的人脸数据信息，如果尚未设置则返回404错误
     * @summary 获取当前用户的人脸数据
     * @param {number} userId 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeFaceGet: async (
      userId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new RequiredError(
          'userId',
          'Required parameter userId was null or undefined when calling usersMeFaceGet.'
        );
      }
      const localVarPath = `/users/me/face`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (userId !== undefined) {
        localVarQueryParameter['userId'] = userId;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取已登录用户的人脸数据信息，如果尚未设置则返回404错误
     * @summary 获取当前用户的人脸数据
     * @param {number} userId 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeFaceGet_1: async (
      userId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new RequiredError(
          'userId',
          'Required parameter userId was null or undefined when calling usersMeFaceGet_1.'
        );
      }
      const localVarPath = `/users/me/face`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (userId !== undefined) {
        localVarQueryParameter['userId'] = userId;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 创建或更新已登录用户的人脸数据信息，如果存在则更新，不存在则创建
     * @summary 创建或更新当前用户的人脸数据
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeFacePut: async (
      inlineObject15?: InlineObject15,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/face`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject15 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject15 !== undefined ? inlineObject15 : {})
        : inlineObject15 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 创建或更新已登录用户的人脸数据信息，如果存在则更新，不存在则创建
     * @summary 创建或更新当前用户的人脸数据
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeFacePut_2: async (
      inlineObject15?: InlineObject15,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/face`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject15 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject15 !== undefined ? inlineObject15 : {})
        : inlineObject15 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 验证提供的人脸数据是否与当前用户的人脸数据匹配
     * @summary 验证人脸数据
     * @param {InlineObject16} [inlineObject16]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeFaceVerifyPost: async (
      inlineObject16?: InlineObject16,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/face/verify`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject16 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject16 !== undefined ? inlineObject16 : {})
        : inlineObject16 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 验证提供的人脸数据是否与当前用户的人脸数据匹配
     * @summary 验证人脸数据
     * @param {InlineObject16} [inlineObject16]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeFaceVerifyPost_3: async (
      inlineObject16?: InlineObject16,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/face/verify`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject16 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject16 !== undefined ? inlineObject16 : {})
        : inlineObject16 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FaceApi - functional programming interface
 * @export
 */
export const FaceApiFp = function (configuration?: Configuration) {
  return {
    /**
     * 获取已登录用户的人脸数据信息，如果尚未设置则返回404错误
     * @summary 获取当前用户的人脸数据
     * @param {number} userId 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersMeFaceGet(
      userId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await FaceApiAxiosParamCreator(
        configuration
      ).usersMeFaceGet(userId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取已登录用户的人脸数据信息，如果尚未设置则返回404错误
     * @summary 获取当前用户的人脸数据
     * @param {number} userId 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersMeFaceGet_1(
      userId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await FaceApiAxiosParamCreator(
        configuration
      ).usersMeFaceGet_1(userId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 创建或更新已登录用户的人脸数据信息，如果存在则更新，不存在则创建
     * @summary 创建或更新当前用户的人脸数据
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersMeFacePut(
      inlineObject15?: InlineObject15,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await FaceApiAxiosParamCreator(
        configuration
      ).usersMeFacePut(inlineObject15, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 创建或更新已登录用户的人脸数据信息，如果存在则更新，不存在则创建
     * @summary 创建或更新当前用户的人脸数据
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersMeFacePut_2(
      inlineObject15?: InlineObject15,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await FaceApiAxiosParamCreator(
        configuration
      ).usersMeFacePut_2(inlineObject15, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 验证提供的人脸数据是否与当前用户的人脸数据匹配
     * @summary 验证人脸数据
     * @param {InlineObject16} [inlineObject16]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersMeFaceVerifyPost(
      inlineObject16?: InlineObject16,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await FaceApiAxiosParamCreator(
        configuration
      ).usersMeFaceVerifyPost(inlineObject16, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 验证提供的人脸数据是否与当前用户的人脸数据匹配
     * @summary 验证人脸数据
     * @param {InlineObject16} [inlineObject16]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersMeFaceVerifyPost_3(
      inlineObject16?: InlineObject16,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await FaceApiAxiosParamCreator(
        configuration
      ).usersMeFaceVerifyPost_3(inlineObject16, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * FaceApi - factory interface
 * @export
 */
export const FaceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * 获取已登录用户的人脸数据信息，如果尚未设置则返回404错误
     * @summary 获取当前用户的人脸数据
     * @param {number} userId 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeFaceGet(
      userId: number,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return FaceApiFp(configuration)
        .usersMeFaceGet(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取已登录用户的人脸数据信息，如果尚未设置则返回404错误
     * @summary 获取当前用户的人脸数据
     * @param {number} userId 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeFaceGet_1(
      userId: number,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return FaceApiFp(configuration)
        .usersMeFaceGet_1(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 创建或更新已登录用户的人脸数据信息，如果存在则更新，不存在则创建
     * @summary 创建或更新当前用户的人脸数据
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeFacePut(
      inlineObject15?: InlineObject15,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return FaceApiFp(configuration)
        .usersMeFacePut(inlineObject15, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 创建或更新已登录用户的人脸数据信息，如果存在则更新，不存在则创建
     * @summary 创建或更新当前用户的人脸数据
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeFacePut_2(
      inlineObject15?: InlineObject15,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return FaceApiFp(configuration)
        .usersMeFacePut_2(inlineObject15, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 验证提供的人脸数据是否与当前用户的人脸数据匹配
     * @summary 验证人脸数据
     * @param {InlineObject16} [inlineObject16]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeFaceVerifyPost(
      inlineObject16?: InlineObject16,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return FaceApiFp(configuration)
        .usersMeFaceVerifyPost(inlineObject16, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 验证提供的人脸数据是否与当前用户的人脸数据匹配
     * @summary 验证人脸数据
     * @param {InlineObject16} [inlineObject16]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeFaceVerifyPost_3(
      inlineObject16?: InlineObject16,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return FaceApiFp(configuration)
        .usersMeFaceVerifyPost_3(inlineObject16, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * FaceApi - object-oriented interface
 * @export
 * @class FaceApi
 * @extends {BaseAPI}
 */
export class FaceApi extends BaseAPI {
  /**
   * 获取已登录用户的人脸数据信息，如果尚未设置则返回404错误
   * @summary 获取当前用户的人脸数据
   * @param {number} userId 用户ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FaceApi
   */
  public usersMeFaceGet(userId: number, options?: any) {
    return FaceApiFp(this.configuration)
      .usersMeFaceGet(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取已登录用户的人脸数据信息，如果尚未设置则返回404错误
   * @summary 获取当前用户的人脸数据
   * @param {number} userId 用户ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FaceApi
   */
  public usersMeFaceGet_1(userId: number, options?: any) {
    return FaceApiFp(this.configuration)
      .usersMeFaceGet_1(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 创建或更新已登录用户的人脸数据信息，如果存在则更新，不存在则创建
   * @summary 创建或更新当前用户的人脸数据
   * @param {InlineObject15} [inlineObject15]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FaceApi
   */
  public usersMeFacePut(inlineObject15?: InlineObject15, options?: any) {
    return FaceApiFp(this.configuration)
      .usersMeFacePut(inlineObject15, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 创建或更新已登录用户的人脸数据信息，如果存在则更新，不存在则创建
   * @summary 创建或更新当前用户的人脸数据
   * @param {InlineObject15} [inlineObject15]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FaceApi
   */
  public usersMeFacePut_2(inlineObject15?: InlineObject15, options?: any) {
    return FaceApiFp(this.configuration)
      .usersMeFacePut_2(inlineObject15, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 验证提供的人脸数据是否与当前用户的人脸数据匹配
   * @summary 验证人脸数据
   * @param {InlineObject16} [inlineObject16]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FaceApi
   */
  public usersMeFaceVerifyPost(inlineObject16?: InlineObject16, options?: any) {
    return FaceApiFp(this.configuration)
      .usersMeFaceVerifyPost(inlineObject16, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 验证提供的人脸数据是否与当前用户的人脸数据匹配
   * @summary 验证人脸数据
   * @param {InlineObject16} [inlineObject16]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FaceApi
   */
  public usersMeFaceVerifyPost_3(
    inlineObject16?: InlineObject16,
    options?: any
  ) {
    return FaceApiFp(this.configuration)
      .usersMeFaceVerifyPost_3(inlineObject16, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
