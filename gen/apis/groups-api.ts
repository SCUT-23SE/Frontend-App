// tslint:disable
/**
 * 实训打卡
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { BadRequest } from '../models';
// @ts-ignore
import { Conflict } from '../models';
// @ts-ignore
import { Forbidden } from '../models';
// @ts-ignore
import { InlineObject2 } from '../models';
// @ts-ignore
import { InlineObject3 } from '../models';
// @ts-ignore
import { InlineObject4 } from '../models';
// @ts-ignore
import { InlineObject5 } from '../models';
// @ts-ignore
import { InternalServerError } from '../models';
// @ts-ignore
import { NotFound } from '../models';
// @ts-ignore
import { RequestQueryStatus } from '../models';
// @ts-ignore
import { Success } from '../models';
// @ts-ignore
import { SuccessWithData } from '../models';
// @ts-ignore
import { Unauthorized } from '../models';
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 获取当前用户创建的或加入的用户组列表。
     * @summary 获取用户相关的用户组列表
     * @param {'created' | 'joined'} [filter] 筛选条件: &#x60;created&#x60; (我创建的), &#x60;joined&#x60; (我加入的)。不传则返回所有相关的。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGet: async (
      filter?: 'created' | 'joined',
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/groups`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (filter !== undefined) {
        localVarQueryParameter['filter'] = filter;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取当前用户创建的或加入的用户组列表。
     * @summary 获取用户相关的用户组列表
     * @param {'created' | 'joined'} [filter] 筛选条件: &#x60;created&#x60; (我创建的), &#x60;joined&#x60; (我加入的)。不传则返回所有相关的。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGet_1: async (
      filter?: 'created' | 'joined',
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/groups`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (filter !== undefined) {
        localVarQueryParameter['filter'] = filter;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 删除指定的用户组及其关联数据。需要是该组的创建者。
     * @summary 删除用户组
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDelete: async (
      groupId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdDelete.'
        );
      }
      const localVarPath = `/groups/{groupId}`.replace(
        `{${'groupId'}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 删除指定的用户组及其关联数据。需要是该组的创建者。
     * @summary 删除用户组
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDelete_2: async (
      groupId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdDelete_2.'
        );
      }
      const localVarPath = `/groups/{groupId}`.replace(
        `{${'groupId'}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取指定用户组的详细信息 (组名、描述、成员数量等)。不需要是该组成员。
     * @summary 获取用户组详细信息
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdGet: async (
      groupId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdGet.'
        );
      }
      const localVarPath = `/groups/{groupId}`.replace(
        `{${'groupId'}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取指定用户组的详细信息 (组名、描述、成员数量等)。不需要是该组成员。
     * @summary 获取用户组详细信息
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdGet_3: async (
      groupId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdGet_3.'
        );
      }
      const localVarPath = `/groups/{groupId}`.replace(
        `{${'groupId'}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户组管理员查看待处理的加入申请。
     * @summary 查看用户组的加入申请列表
     * @param {number} groupId 用户组 ID
     * @param {RequestQueryStatus} [status] 筛选状态: &#x60;pending&#x60; (默认), &#x60;approved&#x60;, &#x60;rejected&#x60;, &#x60;all&#x60;。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdJoinRequestsGet: async (
      groupId: number,
      status?: RequestQueryStatus,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdJoinRequestsGet.'
        );
      }
      const localVarPath = `/groups/{groupId}/join-requests`.replace(
        `{${'groupId'}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (status !== undefined) {
        localVarQueryParameter['status'] = status;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户组管理员查看待处理的加入申请。
     * @summary 查看用户组的加入申请列表
     * @param {number} groupId 用户组 ID
     * @param {RequestQueryStatus} [status] 筛选状态: &#x60;pending&#x60; (默认), &#x60;approved&#x60;, &#x60;rejected&#x60;, &#x60;all&#x60;。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdJoinRequestsGet_4: async (
      groupId: number,
      status?: RequestQueryStatus,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdJoinRequestsGet_4.'
        );
      }
      const localVarPath = `/groups/{groupId}/join-requests`.replace(
        `{${'groupId'}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (status !== undefined) {
        localVarQueryParameter['status'] = status;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户向指定用户组提交加入申请。
     * @summary 申请加入用户组
     * @param {number} groupId 目标用户组 ID
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdJoinRequestsPost: async (
      groupId: number,
      inlineObject4?: InlineObject4,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdJoinRequestsPost.'
        );
      }
      const localVarPath = `/groups/{groupId}/join-requests`.replace(
        `{${'groupId'}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject4 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject4 !== undefined ? inlineObject4 : {})
        : inlineObject4 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户向指定用户组提交加入申请。
     * @summary 申请加入用户组
     * @param {number} groupId 目标用户组 ID
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdJoinRequestsPost_5: async (
      groupId: number,
      inlineObject4?: InlineObject4,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdJoinRequestsPost_5.'
        );
      }
      const localVarPath = `/groups/{groupId}/join-requests`.replace(
        `{${'groupId'}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject4 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject4 !== undefined ? inlineObject4 : {})
        : inlineObject4 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户组管理员批准或拒绝用户的加入申请。
     * @summary 处理用户组加入申请
     * @param {number} groupId 用户组 ID
     * @param {number} requestId 加入申请的 ID
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdJoinRequestsRequestIdPut: async (
      groupId: number,
      requestId: number,
      inlineObject5?: InlineObject5,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdJoinRequestsRequestIdPut.'
        );
      }
      // verify required parameter 'requestId' is not null or undefined
      if (requestId === null || requestId === undefined) {
        throw new RequiredError(
          'requestId',
          'Required parameter requestId was null or undefined when calling groupsGroupIdJoinRequestsRequestIdPut.'
        );
      }
      const localVarPath = `/groups/{groupId}/join-requests/{requestId}`
        .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)))
        .replace(`{${'requestId'}}`, encodeURIComponent(String(requestId)));
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject5 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject5 !== undefined ? inlineObject5 : {})
        : inlineObject5 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户组管理员批准或拒绝用户的加入申请。
     * @summary 处理用户组加入申请
     * @param {number} groupId 用户组 ID
     * @param {number} requestId 加入申请的 ID
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdJoinRequestsRequestIdPut_6: async (
      groupId: number,
      requestId: number,
      inlineObject5?: InlineObject5,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdJoinRequestsRequestIdPut_6.'
        );
      }
      // verify required parameter 'requestId' is not null or undefined
      if (requestId === null || requestId === undefined) {
        throw new RequiredError(
          'requestId',
          'Required parameter requestId was null or undefined when calling groupsGroupIdJoinRequestsRequestIdPut_6.'
        );
      }
      const localVarPath = `/groups/{groupId}/join-requests/{requestId}`
        .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)))
        .replace(`{${'requestId'}}`, encodeURIComponent(String(requestId)));
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject5 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject5 !== undefined ? inlineObject5 : {})
        : inlineObject5 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 查看用户组的所有成员及其角色。需要是该组成员。
     * @summary 获取用户组成员列表
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMembersGet: async (
      groupId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdMembersGet.'
        );
      }
      const localVarPath = `/groups/{groupId}/members`.replace(
        `{${'groupId'}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 查看用户组的所有成员及其角色。需要是该组成员。
     * @summary 获取用户组成员列表
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMembersGet_7: async (
      groupId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdMembersGet_7.'
        );
      }
      const localVarPath = `/groups/{groupId}/members`.replace(
        `{${'groupId'}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户组管理员移除指定成员。
     * @summary 移除用户组成员
     * @param {number} groupId 用户组 ID
     * @param {number} userId 要移除的用户 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMembersUserIdDelete: async (
      groupId: number,
      userId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdMembersUserIdDelete.'
        );
      }
      // verify required parameter 'userId' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new RequiredError(
          'userId',
          'Required parameter userId was null or undefined when calling groupsGroupIdMembersUserIdDelete.'
        );
      }
      const localVarPath = `/groups/{groupId}/members/{userId}`
        .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)))
        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)));
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 用户组管理员移除指定成员。
     * @summary 移除用户组成员
     * @param {number} groupId 用户组 ID
     * @param {number} userId 要移除的用户 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMembersUserIdDelete_8: async (
      groupId: number,
      userId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdMembersUserIdDelete_8.'
        );
      }
      // verify required parameter 'userId' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new RequiredError(
          'userId',
          'Required parameter userId was null or undefined when calling groupsGroupIdMembersUserIdDelete_8.'
        );
      }
      const localVarPath = `/groups/{groupId}/members/{userId}`
        .replace(`{${'groupId'}}`, encodeURIComponent(String(groupId)))
        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)));
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 查询当前登录用户在指定用户组中的状态，包括未关联、申请中、普通成员、管理员等。
     * @summary 查询当前用户在用户组中的状态
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMyStatusGet: async (
      groupId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdMyStatusGet.'
        );
      }
      const localVarPath = `/groups/{groupId}/my-status`.replace(
        `{${'groupId'}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 查询当前登录用户在指定用户组中的状态，包括未关联、申请中、普通成员、管理员等。
     * @summary 查询当前用户在用户组中的状态
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMyStatusGet_9: async (
      groupId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdMyStatusGet_9.'
        );
      }
      const localVarPath = `/groups/{groupId}/my-status`.replace(
        `{${'groupId'}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 修改用户组的名称或描述。需要是该组管理员。
     * @summary 修改用户组信息
     * @param {number} groupId 用户组 ID
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdPut: async (
      groupId: number,
      inlineObject3?: InlineObject3,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdPut.'
        );
      }
      const localVarPath = `/groups/{groupId}`.replace(
        `{${'groupId'}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject3 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject3 !== undefined ? inlineObject3 : {})
        : inlineObject3 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 修改用户组的名称或描述。需要是该组管理员。
     * @summary 修改用户组信息
     * @param {number} groupId 用户组 ID
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdPut_10: async (
      groupId: number,
      inlineObject3?: InlineObject3,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      if (groupId === null || groupId === undefined) {
        throw new RequiredError(
          'groupId',
          'Required parameter groupId was null or undefined when calling groupsGroupIdPut_10.'
        );
      }
      const localVarPath = `/groups/{groupId}`.replace(
        `{${'groupId'}}`,
        encodeURIComponent(String(groupId))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject3 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject3 !== undefined ? inlineObject3 : {})
        : inlineObject3 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 任何登录用户可以创建用户组，并自动成为该组管理员。
     * @summary 创建用户组
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsPost: async (
      inlineObject2?: InlineObject2,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/groups`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject2 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject2 !== undefined ? inlineObject2 : {})
        : inlineObject2 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 任何登录用户可以创建用户组，并自动成为该组管理员。
     * @summary 创建用户组
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsPost_11: async (
      inlineObject2?: InlineObject2,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/groups`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof inlineObject2 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject2 !== undefined ? inlineObject2 : {})
        : inlineObject2 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * 获取当前用户创建的或加入的用户组列表。
     * @summary 获取用户相关的用户组列表
     * @param {'created' | 'joined'} [filter] 筛选条件: &#x60;created&#x60; (我创建的), &#x60;joined&#x60; (我加入的)。不传则返回所有相关的。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGet(
      filter?: 'created' | 'joined',
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsGet(filter, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取当前用户创建的或加入的用户组列表。
     * @summary 获取用户相关的用户组列表
     * @param {'created' | 'joined'} [filter] 筛选条件: &#x60;created&#x60; (我创建的), &#x60;joined&#x60; (我加入的)。不传则返回所有相关的。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGet_1(
      filter?: 'created' | 'joined',
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsGet_1(filter, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 删除指定的用户组及其关联数据。需要是该组的创建者。
     * @summary 删除用户组
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdDelete(
      groupId: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsGroupIdDelete(groupId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 删除指定的用户组及其关联数据。需要是该组的创建者。
     * @summary 删除用户组
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdDelete_2(
      groupId: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsGroupIdDelete_2(groupId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取指定用户组的详细信息 (组名、描述、成员数量等)。不需要是该组成员。
     * @summary 获取用户组详细信息
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdGet(
      groupId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsGroupIdGet(groupId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取指定用户组的详细信息 (组名、描述、成员数量等)。不需要是该组成员。
     * @summary 获取用户组详细信息
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdGet_3(
      groupId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsGroupIdGet_3(groupId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户组管理员查看待处理的加入申请。
     * @summary 查看用户组的加入申请列表
     * @param {number} groupId 用户组 ID
     * @param {RequestQueryStatus} [status] 筛选状态: &#x60;pending&#x60; (默认), &#x60;approved&#x60;, &#x60;rejected&#x60;, &#x60;all&#x60;。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdJoinRequestsGet(
      groupId: number,
      status?: RequestQueryStatus,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsGroupIdJoinRequestsGet(groupId, status, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户组管理员查看待处理的加入申请。
     * @summary 查看用户组的加入申请列表
     * @param {number} groupId 用户组 ID
     * @param {RequestQueryStatus} [status] 筛选状态: &#x60;pending&#x60; (默认), &#x60;approved&#x60;, &#x60;rejected&#x60;, &#x60;all&#x60;。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdJoinRequestsGet_4(
      groupId: number,
      status?: RequestQueryStatus,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsGroupIdJoinRequestsGet_4(groupId, status, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户向指定用户组提交加入申请。
     * @summary 申请加入用户组
     * @param {number} groupId 目标用户组 ID
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdJoinRequestsPost(
      groupId: number,
      inlineObject4?: InlineObject4,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsGroupIdJoinRequestsPost(groupId, inlineObject4, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户向指定用户组提交加入申请。
     * @summary 申请加入用户组
     * @param {number} groupId 目标用户组 ID
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdJoinRequestsPost_5(
      groupId: number,
      inlineObject4?: InlineObject4,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsGroupIdJoinRequestsPost_5(groupId, inlineObject4, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户组管理员批准或拒绝用户的加入申请。
     * @summary 处理用户组加入申请
     * @param {number} groupId 用户组 ID
     * @param {number} requestId 加入申请的 ID
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdJoinRequestsRequestIdPut(
      groupId: number,
      requestId: number,
      inlineObject5?: InlineObject5,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsGroupIdJoinRequestsRequestIdPut(
        groupId,
        requestId,
        inlineObject5,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户组管理员批准或拒绝用户的加入申请。
     * @summary 处理用户组加入申请
     * @param {number} groupId 用户组 ID
     * @param {number} requestId 加入申请的 ID
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdJoinRequestsRequestIdPut_6(
      groupId: number,
      requestId: number,
      inlineObject5?: InlineObject5,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsGroupIdJoinRequestsRequestIdPut_6(
        groupId,
        requestId,
        inlineObject5,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 查看用户组的所有成员及其角色。需要是该组成员。
     * @summary 获取用户组成员列表
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdMembersGet(
      groupId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsGroupIdMembersGet(groupId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 查看用户组的所有成员及其角色。需要是该组成员。
     * @summary 获取用户组成员列表
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdMembersGet_7(
      groupId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsGroupIdMembersGet_7(groupId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户组管理员移除指定成员。
     * @summary 移除用户组成员
     * @param {number} groupId 用户组 ID
     * @param {number} userId 要移除的用户 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdMembersUserIdDelete(
      groupId: number,
      userId: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsGroupIdMembersUserIdDelete(groupId, userId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 用户组管理员移除指定成员。
     * @summary 移除用户组成员
     * @param {number} groupId 用户组 ID
     * @param {number} userId 要移除的用户 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdMembersUserIdDelete_8(
      groupId: number,
      userId: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsGroupIdMembersUserIdDelete_8(groupId, userId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 查询当前登录用户在指定用户组中的状态，包括未关联、申请中、普通成员、管理员等。
     * @summary 查询当前用户在用户组中的状态
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdMyStatusGet(
      groupId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsGroupIdMyStatusGet(groupId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 查询当前登录用户在指定用户组中的状态，包括未关联、申请中、普通成员、管理员等。
     * @summary 查询当前用户在用户组中的状态
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdMyStatusGet_9(
      groupId: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsGroupIdMyStatusGet_9(groupId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 修改用户组的名称或描述。需要是该组管理员。
     * @summary 修改用户组信息
     * @param {number} groupId 用户组 ID
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdPut(
      groupId: number,
      inlineObject3?: InlineObject3,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsGroupIdPut(groupId, inlineObject3, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 修改用户组的名称或描述。需要是该组管理员。
     * @summary 修改用户组信息
     * @param {number} groupId 用户组 ID
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsGroupIdPut_10(
      groupId: number,
      inlineObject3?: InlineObject3,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsGroupIdPut_10(groupId, inlineObject3, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 任何登录用户可以创建用户组，并自动成为该组管理员。
     * @summary 创建用户组
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsPost(
      inlineObject2?: InlineObject2,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsPost(inlineObject2, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 任何登录用户可以创建用户组，并自动成为该组管理员。
     * @summary 创建用户组
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async groupsPost_11(
      inlineObject2?: InlineObject2,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration
      ).groupsPost_11(inlineObject2, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * 获取当前用户创建的或加入的用户组列表。
     * @summary 获取用户相关的用户组列表
     * @param {'created' | 'joined'} [filter] 筛选条件: &#x60;created&#x60; (我创建的), &#x60;joined&#x60; (我加入的)。不传则返回所有相关的。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGet(
      filter?: 'created' | 'joined',
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return GroupsApiFp(configuration)
        .groupsGet(filter, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取当前用户创建的或加入的用户组列表。
     * @summary 获取用户相关的用户组列表
     * @param {'created' | 'joined'} [filter] 筛选条件: &#x60;created&#x60; (我创建的), &#x60;joined&#x60; (我加入的)。不传则返回所有相关的。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGet_1(
      filter?: 'created' | 'joined',
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return GroupsApiFp(configuration)
        .groupsGet_1(filter, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 删除指定的用户组及其关联数据。需要是该组的创建者。
     * @summary 删除用户组
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDelete(groupId: number, options?: any): AxiosPromise<Success> {
      return GroupsApiFp(configuration)
        .groupsGroupIdDelete(groupId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 删除指定的用户组及其关联数据。需要是该组的创建者。
     * @summary 删除用户组
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDelete_2(
      groupId: number,
      options?: any
    ): AxiosPromise<Success> {
      return GroupsApiFp(configuration)
        .groupsGroupIdDelete_2(groupId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取指定用户组的详细信息 (组名、描述、成员数量等)。不需要是该组成员。
     * @summary 获取用户组详细信息
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdGet(
      groupId: number,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return GroupsApiFp(configuration)
        .groupsGroupIdGet(groupId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取指定用户组的详细信息 (组名、描述、成员数量等)。不需要是该组成员。
     * @summary 获取用户组详细信息
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdGet_3(
      groupId: number,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return GroupsApiFp(configuration)
        .groupsGroupIdGet_3(groupId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户组管理员查看待处理的加入申请。
     * @summary 查看用户组的加入申请列表
     * @param {number} groupId 用户组 ID
     * @param {RequestQueryStatus} [status] 筛选状态: &#x60;pending&#x60; (默认), &#x60;approved&#x60;, &#x60;rejected&#x60;, &#x60;all&#x60;。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdJoinRequestsGet(
      groupId: number,
      status?: RequestQueryStatus,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return GroupsApiFp(configuration)
        .groupsGroupIdJoinRequestsGet(groupId, status, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户组管理员查看待处理的加入申请。
     * @summary 查看用户组的加入申请列表
     * @param {number} groupId 用户组 ID
     * @param {RequestQueryStatus} [status] 筛选状态: &#x60;pending&#x60; (默认), &#x60;approved&#x60;, &#x60;rejected&#x60;, &#x60;all&#x60;。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdJoinRequestsGet_4(
      groupId: number,
      status?: RequestQueryStatus,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return GroupsApiFp(configuration)
        .groupsGroupIdJoinRequestsGet_4(groupId, status, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户向指定用户组提交加入申请。
     * @summary 申请加入用户组
     * @param {number} groupId 目标用户组 ID
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdJoinRequestsPost(
      groupId: number,
      inlineObject4?: InlineObject4,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return GroupsApiFp(configuration)
        .groupsGroupIdJoinRequestsPost(groupId, inlineObject4, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户向指定用户组提交加入申请。
     * @summary 申请加入用户组
     * @param {number} groupId 目标用户组 ID
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdJoinRequestsPost_5(
      groupId: number,
      inlineObject4?: InlineObject4,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return GroupsApiFp(configuration)
        .groupsGroupIdJoinRequestsPost_5(groupId, inlineObject4, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户组管理员批准或拒绝用户的加入申请。
     * @summary 处理用户组加入申请
     * @param {number} groupId 用户组 ID
     * @param {number} requestId 加入申请的 ID
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdJoinRequestsRequestIdPut(
      groupId: number,
      requestId: number,
      inlineObject5?: InlineObject5,
      options?: any
    ): AxiosPromise<Success> {
      return GroupsApiFp(configuration)
        .groupsGroupIdJoinRequestsRequestIdPut(
          groupId,
          requestId,
          inlineObject5,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户组管理员批准或拒绝用户的加入申请。
     * @summary 处理用户组加入申请
     * @param {number} groupId 用户组 ID
     * @param {number} requestId 加入申请的 ID
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdJoinRequestsRequestIdPut_6(
      groupId: number,
      requestId: number,
      inlineObject5?: InlineObject5,
      options?: any
    ): AxiosPromise<Success> {
      return GroupsApiFp(configuration)
        .groupsGroupIdJoinRequestsRequestIdPut_6(
          groupId,
          requestId,
          inlineObject5,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * 查看用户组的所有成员及其角色。需要是该组成员。
     * @summary 获取用户组成员列表
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMembersGet(
      groupId: number,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return GroupsApiFp(configuration)
        .groupsGroupIdMembersGet(groupId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 查看用户组的所有成员及其角色。需要是该组成员。
     * @summary 获取用户组成员列表
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMembersGet_7(
      groupId: number,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return GroupsApiFp(configuration)
        .groupsGroupIdMembersGet_7(groupId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户组管理员移除指定成员。
     * @summary 移除用户组成员
     * @param {number} groupId 用户组 ID
     * @param {number} userId 要移除的用户 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMembersUserIdDelete(
      groupId: number,
      userId: number,
      options?: any
    ): AxiosPromise<Success> {
      return GroupsApiFp(configuration)
        .groupsGroupIdMembersUserIdDelete(groupId, userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 用户组管理员移除指定成员。
     * @summary 移除用户组成员
     * @param {number} groupId 用户组 ID
     * @param {number} userId 要移除的用户 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMembersUserIdDelete_8(
      groupId: number,
      userId: number,
      options?: any
    ): AxiosPromise<Success> {
      return GroupsApiFp(configuration)
        .groupsGroupIdMembersUserIdDelete_8(groupId, userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 查询当前登录用户在指定用户组中的状态，包括未关联、申请中、普通成员、管理员等。
     * @summary 查询当前用户在用户组中的状态
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMyStatusGet(
      groupId: number,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return GroupsApiFp(configuration)
        .groupsGroupIdMyStatusGet(groupId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 查询当前登录用户在指定用户组中的状态，包括未关联、申请中、普通成员、管理员等。
     * @summary 查询当前用户在用户组中的状态
     * @param {number} groupId 用户组 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdMyStatusGet_9(
      groupId: number,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return GroupsApiFp(configuration)
        .groupsGroupIdMyStatusGet_9(groupId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 修改用户组的名称或描述。需要是该组管理员。
     * @summary 修改用户组信息
     * @param {number} groupId 用户组 ID
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdPut(
      groupId: number,
      inlineObject3?: InlineObject3,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return GroupsApiFp(configuration)
        .groupsGroupIdPut(groupId, inlineObject3, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 修改用户组的名称或描述。需要是该组管理员。
     * @summary 修改用户组信息
     * @param {number} groupId 用户组 ID
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdPut_10(
      groupId: number,
      inlineObject3?: InlineObject3,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return GroupsApiFp(configuration)
        .groupsGroupIdPut_10(groupId, inlineObject3, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 任何登录用户可以创建用户组，并自动成为该组管理员。
     * @summary 创建用户组
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsPost(
      inlineObject2?: InlineObject2,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return GroupsApiFp(configuration)
        .groupsPost(inlineObject2, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 任何登录用户可以创建用户组，并自动成为该组管理员。
     * @summary 创建用户组
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsPost_11(
      inlineObject2?: InlineObject2,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return GroupsApiFp(configuration)
        .groupsPost_11(inlineObject2, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI {
  /**
   * 获取当前用户创建的或加入的用户组列表。
   * @summary 获取用户相关的用户组列表
   * @param {'created' | 'joined'} [filter] 筛选条件: &#x60;created&#x60; (我创建的), &#x60;joined&#x60; (我加入的)。不传则返回所有相关的。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsGet(filter?: 'created' | 'joined', options?: any) {
    return GroupsApiFp(this.configuration)
      .groupsGet(filter, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取当前用户创建的或加入的用户组列表。
   * @summary 获取用户相关的用户组列表
   * @param {'created' | 'joined'} [filter] 筛选条件: &#x60;created&#x60; (我创建的), &#x60;joined&#x60; (我加入的)。不传则返回所有相关的。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsGet_1(filter?: 'created' | 'joined', options?: any) {
    return GroupsApiFp(this.configuration)
      .groupsGet_1(filter, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 删除指定的用户组及其关联数据。需要是该组的创建者。
   * @summary 删除用户组
   * @param {number} groupId 用户组 ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsGroupIdDelete(groupId: number, options?: any) {
    return GroupsApiFp(this.configuration)
      .groupsGroupIdDelete(groupId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 删除指定的用户组及其关联数据。需要是该组的创建者。
   * @summary 删除用户组
   * @param {number} groupId 用户组 ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsGroupIdDelete_2(groupId: number, options?: any) {
    return GroupsApiFp(this.configuration)
      .groupsGroupIdDelete_2(groupId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取指定用户组的详细信息 (组名、描述、成员数量等)。不需要是该组成员。
   * @summary 获取用户组详细信息
   * @param {number} groupId 用户组 ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsGroupIdGet(groupId: number, options?: any) {
    return GroupsApiFp(this.configuration)
      .groupsGroupIdGet(groupId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取指定用户组的详细信息 (组名、描述、成员数量等)。不需要是该组成员。
   * @summary 获取用户组详细信息
   * @param {number} groupId 用户组 ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsGroupIdGet_3(groupId: number, options?: any) {
    return GroupsApiFp(this.configuration)
      .groupsGroupIdGet_3(groupId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户组管理员查看待处理的加入申请。
   * @summary 查看用户组的加入申请列表
   * @param {number} groupId 用户组 ID
   * @param {RequestQueryStatus} [status] 筛选状态: &#x60;pending&#x60; (默认), &#x60;approved&#x60;, &#x60;rejected&#x60;, &#x60;all&#x60;。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsGroupIdJoinRequestsGet(
    groupId: number,
    status?: RequestQueryStatus,
    options?: any
  ) {
    return GroupsApiFp(this.configuration)
      .groupsGroupIdJoinRequestsGet(groupId, status, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户组管理员查看待处理的加入申请。
   * @summary 查看用户组的加入申请列表
   * @param {number} groupId 用户组 ID
   * @param {RequestQueryStatus} [status] 筛选状态: &#x60;pending&#x60; (默认), &#x60;approved&#x60;, &#x60;rejected&#x60;, &#x60;all&#x60;。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsGroupIdJoinRequestsGet_4(
    groupId: number,
    status?: RequestQueryStatus,
    options?: any
  ) {
    return GroupsApiFp(this.configuration)
      .groupsGroupIdJoinRequestsGet_4(groupId, status, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户向指定用户组提交加入申请。
   * @summary 申请加入用户组
   * @param {number} groupId 目标用户组 ID
   * @param {InlineObject4} [inlineObject4]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsGroupIdJoinRequestsPost(
    groupId: number,
    inlineObject4?: InlineObject4,
    options?: any
  ) {
    return GroupsApiFp(this.configuration)
      .groupsGroupIdJoinRequestsPost(groupId, inlineObject4, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户向指定用户组提交加入申请。
   * @summary 申请加入用户组
   * @param {number} groupId 目标用户组 ID
   * @param {InlineObject4} [inlineObject4]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsGroupIdJoinRequestsPost_5(
    groupId: number,
    inlineObject4?: InlineObject4,
    options?: any
  ) {
    return GroupsApiFp(this.configuration)
      .groupsGroupIdJoinRequestsPost_5(groupId, inlineObject4, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户组管理员批准或拒绝用户的加入申请。
   * @summary 处理用户组加入申请
   * @param {number} groupId 用户组 ID
   * @param {number} requestId 加入申请的 ID
   * @param {InlineObject5} [inlineObject5]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsGroupIdJoinRequestsRequestIdPut(
    groupId: number,
    requestId: number,
    inlineObject5?: InlineObject5,
    options?: any
  ) {
    return GroupsApiFp(this.configuration)
      .groupsGroupIdJoinRequestsRequestIdPut(
        groupId,
        requestId,
        inlineObject5,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户组管理员批准或拒绝用户的加入申请。
   * @summary 处理用户组加入申请
   * @param {number} groupId 用户组 ID
   * @param {number} requestId 加入申请的 ID
   * @param {InlineObject5} [inlineObject5]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsGroupIdJoinRequestsRequestIdPut_6(
    groupId: number,
    requestId: number,
    inlineObject5?: InlineObject5,
    options?: any
  ) {
    return GroupsApiFp(this.configuration)
      .groupsGroupIdJoinRequestsRequestIdPut_6(
        groupId,
        requestId,
        inlineObject5,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 查看用户组的所有成员及其角色。需要是该组成员。
   * @summary 获取用户组成员列表
   * @param {number} groupId 用户组 ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsGroupIdMembersGet(groupId: number, options?: any) {
    return GroupsApiFp(this.configuration)
      .groupsGroupIdMembersGet(groupId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 查看用户组的所有成员及其角色。需要是该组成员。
   * @summary 获取用户组成员列表
   * @param {number} groupId 用户组 ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsGroupIdMembersGet_7(groupId: number, options?: any) {
    return GroupsApiFp(this.configuration)
      .groupsGroupIdMembersGet_7(groupId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户组管理员移除指定成员。
   * @summary 移除用户组成员
   * @param {number} groupId 用户组 ID
   * @param {number} userId 要移除的用户 ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsGroupIdMembersUserIdDelete(
    groupId: number,
    userId: number,
    options?: any
  ) {
    return GroupsApiFp(this.configuration)
      .groupsGroupIdMembersUserIdDelete(groupId, userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 用户组管理员移除指定成员。
   * @summary 移除用户组成员
   * @param {number} groupId 用户组 ID
   * @param {number} userId 要移除的用户 ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsGroupIdMembersUserIdDelete_8(
    groupId: number,
    userId: number,
    options?: any
  ) {
    return GroupsApiFp(this.configuration)
      .groupsGroupIdMembersUserIdDelete_8(groupId, userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 查询当前登录用户在指定用户组中的状态，包括未关联、申请中、普通成员、管理员等。
   * @summary 查询当前用户在用户组中的状态
   * @param {number} groupId 用户组 ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsGroupIdMyStatusGet(groupId: number, options?: any) {
    return GroupsApiFp(this.configuration)
      .groupsGroupIdMyStatusGet(groupId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 查询当前登录用户在指定用户组中的状态，包括未关联、申请中、普通成员、管理员等。
   * @summary 查询当前用户在用户组中的状态
   * @param {number} groupId 用户组 ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsGroupIdMyStatusGet_9(groupId: number, options?: any) {
    return GroupsApiFp(this.configuration)
      .groupsGroupIdMyStatusGet_9(groupId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 修改用户组的名称或描述。需要是该组管理员。
   * @summary 修改用户组信息
   * @param {number} groupId 用户组 ID
   * @param {InlineObject3} [inlineObject3]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsGroupIdPut(
    groupId: number,
    inlineObject3?: InlineObject3,
    options?: any
  ) {
    return GroupsApiFp(this.configuration)
      .groupsGroupIdPut(groupId, inlineObject3, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 修改用户组的名称或描述。需要是该组管理员。
   * @summary 修改用户组信息
   * @param {number} groupId 用户组 ID
   * @param {InlineObject3} [inlineObject3]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsGroupIdPut_10(
    groupId: number,
    inlineObject3?: InlineObject3,
    options?: any
  ) {
    return GroupsApiFp(this.configuration)
      .groupsGroupIdPut_10(groupId, inlineObject3, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 任何登录用户可以创建用户组，并自动成为该组管理员。
   * @summary 创建用户组
   * @param {InlineObject2} [inlineObject2]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsPost(inlineObject2?: InlineObject2, options?: any) {
    return GroupsApiFp(this.configuration)
      .groupsPost(inlineObject2, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 任何登录用户可以创建用户组，并自动成为该组管理员。
   * @summary 创建用户组
   * @param {InlineObject2} [inlineObject2]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public groupsPost_11(inlineObject2?: InlineObject2, options?: any) {
    return GroupsApiFp(this.configuration)
      .groupsPost_11(inlineObject2, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
