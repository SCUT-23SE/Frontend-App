// tslint:disable
/**
 * 实训打卡
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { BaseResponse } from '../models';
// @ts-ignore
import { InternalServerError } from '../models';
// @ts-ignore
import { SuccessWithData } from '../models';
/**
 * StatisticsApi - axios parameter creator
 * @export
 */
export const StatisticsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 获取每日签到统计数据，按日期分组展示
     * @summary 获取每日签到统计
     * @param {number} [groupId] 用户组ID（可选，筛选特定用户组的统计数据）
     * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
     * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsDailyGet: async (
      groupId?: number,
      startDate?: number,
      endDate?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/statistics/daily`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (groupId !== undefined) {
        localVarQueryParameter['groupId'] = groupId;
      }

      if (startDate !== undefined) {
        localVarQueryParameter['startDate'] = startDate;
      }

      if (endDate !== undefined) {
        localVarQueryParameter['endDate'] = endDate;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取每日签到统计数据，按日期分组展示
     * @summary 获取每日签到统计
     * @param {number} [groupId] 用户组ID（可选，筛选特定用户组的统计数据）
     * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
     * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsDailyGet_1: async (
      groupId?: number,
      startDate?: number,
      endDate?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/statistics/daily`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (groupId !== undefined) {
        localVarQueryParameter['groupId'] = groupId;
      }

      if (startDate !== undefined) {
        localVarQueryParameter['startDate'] = startDate;
      }

      if (endDate !== undefined) {
        localVarQueryParameter['endDate'] = endDate;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取所有用户组的签到统计数据，包括成功的、缺勤的等
     * @summary 获取用户组签到统计数据
     * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
     * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsGroupsGet: async (
      startDate?: number,
      endDate?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/statistics/groups`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (startDate !== undefined) {
        localVarQueryParameter['startDate'] = startDate;
      }

      if (endDate !== undefined) {
        localVarQueryParameter['endDate'] = endDate;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取所有用户组的签到统计数据，包括成功的、缺勤的等
     * @summary 获取用户组签到统计数据
     * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
     * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsGroupsGet_2: async (
      startDate?: number,
      endDate?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/statistics/groups`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (startDate !== undefined) {
        localVarQueryParameter['startDate'] = startDate;
      }

      if (endDate !== undefined) {
        localVarQueryParameter['endDate'] = endDate;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取用户的签到统计数据详情
     * @summary 获取用户签到统计数据
     * @param {number} [groupId] 用户组ID（筛选特定用户组的用户）
     * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
     * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsUsersGet: async (
      groupId?: number,
      startDate?: number,
      endDate?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/statistics/users`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (groupId !== undefined) {
        localVarQueryParameter['groupId'] = groupId;
      }

      if (startDate !== undefined) {
        localVarQueryParameter['startDate'] = startDate;
      }

      if (endDate !== undefined) {
        localVarQueryParameter['endDate'] = endDate;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 获取用户的签到统计数据详情
     * @summary 获取用户签到统计数据
     * @param {number} [groupId] 用户组ID（筛选特定用户组的用户）
     * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
     * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsUsersGet_3: async (
      groupId?: number,
      startDate?: number,
      endDate?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/statistics/users`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (groupId !== undefined) {
        localVarQueryParameter['groupId'] = groupId;
      }

      if (startDate !== undefined) {
        localVarQueryParameter['startDate'] = startDate;
      }

      if (endDate !== undefined) {
        localVarQueryParameter['endDate'] = endDate;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * StatisticsApi - functional programming interface
 * @export
 */
export const StatisticsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * 获取每日签到统计数据，按日期分组展示
     * @summary 获取每日签到统计
     * @param {number} [groupId] 用户组ID（可选，筛选特定用户组的统计数据）
     * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
     * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async statisticsDailyGet(
      groupId?: number,
      startDate?: number,
      endDate?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await StatisticsApiAxiosParamCreator(
        configuration
      ).statisticsDailyGet(groupId, startDate, endDate, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取每日签到统计数据，按日期分组展示
     * @summary 获取每日签到统计
     * @param {number} [groupId] 用户组ID（可选，筛选特定用户组的统计数据）
     * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
     * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async statisticsDailyGet_1(
      groupId?: number,
      startDate?: number,
      endDate?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await StatisticsApiAxiosParamCreator(
        configuration
      ).statisticsDailyGet_1(groupId, startDate, endDate, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取所有用户组的签到统计数据，包括成功的、缺勤的等
     * @summary 获取用户组签到统计数据
     * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
     * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async statisticsGroupsGet(
      startDate?: number,
      endDate?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await StatisticsApiAxiosParamCreator(
        configuration
      ).statisticsGroupsGet(startDate, endDate, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取所有用户组的签到统计数据，包括成功的、缺勤的等
     * @summary 获取用户组签到统计数据
     * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
     * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async statisticsGroupsGet_2(
      startDate?: number,
      endDate?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await StatisticsApiAxiosParamCreator(
        configuration
      ).statisticsGroupsGet_2(startDate, endDate, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取用户的签到统计数据详情
     * @summary 获取用户签到统计数据
     * @param {number} [groupId] 用户组ID（筛选特定用户组的用户）
     * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
     * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async statisticsUsersGet(
      groupId?: number,
      startDate?: number,
      endDate?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await StatisticsApiAxiosParamCreator(
        configuration
      ).statisticsUsersGet(groupId, startDate, endDate, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * 获取用户的签到统计数据详情
     * @summary 获取用户签到统计数据
     * @param {number} [groupId] 用户组ID（筛选特定用户组的用户）
     * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
     * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async statisticsUsersGet_3(
      groupId?: number,
      startDate?: number,
      endDate?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SuccessWithData & object>
    > {
      const localVarAxiosArgs = await StatisticsApiAxiosParamCreator(
        configuration
      ).statisticsUsersGet_3(groupId, startDate, endDate, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * StatisticsApi - factory interface
 * @export
 */
export const StatisticsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * 获取每日签到统计数据，按日期分组展示
     * @summary 获取每日签到统计
     * @param {number} [groupId] 用户组ID（可选，筛选特定用户组的统计数据）
     * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
     * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsDailyGet(
      groupId?: number,
      startDate?: number,
      endDate?: number,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return StatisticsApiFp(configuration)
        .statisticsDailyGet(groupId, startDate, endDate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取每日签到统计数据，按日期分组展示
     * @summary 获取每日签到统计
     * @param {number} [groupId] 用户组ID（可选，筛选特定用户组的统计数据）
     * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
     * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsDailyGet_1(
      groupId?: number,
      startDate?: number,
      endDate?: number,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return StatisticsApiFp(configuration)
        .statisticsDailyGet_1(groupId, startDate, endDate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取所有用户组的签到统计数据，包括成功的、缺勤的等
     * @summary 获取用户组签到统计数据
     * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
     * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsGroupsGet(
      startDate?: number,
      endDate?: number,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return StatisticsApiFp(configuration)
        .statisticsGroupsGet(startDate, endDate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取所有用户组的签到统计数据，包括成功的、缺勤的等
     * @summary 获取用户组签到统计数据
     * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
     * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsGroupsGet_2(
      startDate?: number,
      endDate?: number,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return StatisticsApiFp(configuration)
        .statisticsGroupsGet_2(startDate, endDate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取用户的签到统计数据详情
     * @summary 获取用户签到统计数据
     * @param {number} [groupId] 用户组ID（筛选特定用户组的用户）
     * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
     * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsUsersGet(
      groupId?: number,
      startDate?: number,
      endDate?: number,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return StatisticsApiFp(configuration)
        .statisticsUsersGet(groupId, startDate, endDate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 获取用户的签到统计数据详情
     * @summary 获取用户签到统计数据
     * @param {number} [groupId] 用户组ID（筛选特定用户组的用户）
     * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
     * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statisticsUsersGet_3(
      groupId?: number,
      startDate?: number,
      endDate?: number,
      options?: any
    ): AxiosPromise<SuccessWithData & object> {
      return StatisticsApiFp(configuration)
        .statisticsUsersGet_3(groupId, startDate, endDate, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * StatisticsApi - object-oriented interface
 * @export
 * @class StatisticsApi
 * @extends {BaseAPI}
 */
export class StatisticsApi extends BaseAPI {
  /**
   * 获取每日签到统计数据，按日期分组展示
   * @summary 获取每日签到统计
   * @param {number} [groupId] 用户组ID（可选，筛选特定用户组的统计数据）
   * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
   * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatisticsApi
   */
  public statisticsDailyGet(
    groupId?: number,
    startDate?: number,
    endDate?: number,
    options?: any
  ) {
    return StatisticsApiFp(this.configuration)
      .statisticsDailyGet(groupId, startDate, endDate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取每日签到统计数据，按日期分组展示
   * @summary 获取每日签到统计
   * @param {number} [groupId] 用户组ID（可选，筛选特定用户组的统计数据）
   * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
   * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatisticsApi
   */
  public statisticsDailyGet_1(
    groupId?: number,
    startDate?: number,
    endDate?: number,
    options?: any
  ) {
    return StatisticsApiFp(this.configuration)
      .statisticsDailyGet_1(groupId, startDate, endDate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取所有用户组的签到统计数据，包括成功的、缺勤的等
   * @summary 获取用户组签到统计数据
   * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
   * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatisticsApi
   */
  public statisticsGroupsGet(
    startDate?: number,
    endDate?: number,
    options?: any
  ) {
    return StatisticsApiFp(this.configuration)
      .statisticsGroupsGet(startDate, endDate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取所有用户组的签到统计数据，包括成功的、缺勤的等
   * @summary 获取用户组签到统计数据
   * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
   * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatisticsApi
   */
  public statisticsGroupsGet_2(
    startDate?: number,
    endDate?: number,
    options?: any
  ) {
    return StatisticsApiFp(this.configuration)
      .statisticsGroupsGet_2(startDate, endDate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取用户的签到统计数据详情
   * @summary 获取用户签到统计数据
   * @param {number} [groupId] 用户组ID（筛选特定用户组的用户）
   * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
   * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatisticsApi
   */
  public statisticsUsersGet(
    groupId?: number,
    startDate?: number,
    endDate?: number,
    options?: any
  ) {
    return StatisticsApiFp(this.configuration)
      .statisticsUsersGet(groupId, startDate, endDate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 获取用户的签到统计数据详情
   * @summary 获取用户签到统计数据
   * @param {number} [groupId] 用户组ID（筛选特定用户组的用户）
   * @param {number} [startDate] 开始日期（Unix时间戳，单位：秒）
   * @param {number} [endDate] 结束日期（Unix时间戳，单位：秒）
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatisticsApi
   */
  public statisticsUsersGet_3(
    groupId?: number,
    startDate?: number,
    endDate?: number,
    options?: any
  ) {
    return StatisticsApiFp(this.configuration)
      .statisticsUsersGet_3(groupId, startDate, endDate, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
